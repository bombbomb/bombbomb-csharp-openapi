/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromptsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a running Prompt Bot for a list
        /// </summary>
        /// <remarks>
        /// Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>PromptBotBot</returns>
        PromptBotBot CreatePromptBot (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId);

        /// <summary>
        /// Create a running Prompt Bot for a list
        /// </summary>
        /// <remarks>
        /// Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>ApiResponse of PromptBotBot</returns>
        ApiResponse<PromptBotBot> CreatePromptBotWithHttpInfo (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId);
        /// <summary>
        /// Prompts user to send a video
        /// </summary>
        /// <remarks>
        /// Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>VideoEmailPrompt</returns>
        VideoEmailPrompt CreateVideoEmailPrompt (VideoEmailPrompt prompt);

        /// <summary>
        /// Prompts user to send a video
        /// </summary>
        /// <remarks>
        /// Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        ApiResponse<VideoEmailPrompt> CreateVideoEmailPromptWithHttpInfo (VideoEmailPrompt prompt);
        /// <summary>
        /// List pending prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VideoEmailPrompt&gt;</returns>
        List<VideoEmailPrompt> GetPendingVideoEmailPrompts ();

        /// <summary>
        /// List pending prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VideoEmailPrompt&gt;</returns>
        ApiResponse<List<VideoEmailPrompt>> GetPendingVideoEmailPromptsWithHttpInfo ();
        /// <summary>
        /// List Prompt Bots
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Bots for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PromptBotBot&gt;</returns>
        List<PromptBotBot> GetPromptBots ();

        /// <summary>
        /// List Prompt Bots
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Bots for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PromptBotBot&gt;</returns>
        ApiResponse<List<PromptBotBot>> GetPromptBotsWithHttpInfo ();
        /// <summary>
        /// List Prompt Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Campaigns for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPromptCampaigns ();

        /// <summary>
        /// List Prompt Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Campaigns for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPromptCampaignsWithHttpInfo ();
        /// <summary>
        /// Gets a prompt
        /// </summary>
        /// <remarks>
        /// Gets a prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>VideoEmailPrompt</returns>
        VideoEmailPrompt GetVideoEmailPrompt (string id);

        /// <summary>
        /// Gets a prompt
        /// </summary>
        /// <remarks>
        /// Gets a prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        ApiResponse<VideoEmailPrompt> GetVideoEmailPromptWithHttpInfo (string id);
        /// <summary>
        /// List prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of all prompts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VideoEmailPrompt&gt;</returns>
        List<VideoEmailPrompt> GetVideoEmailPrompts ();

        /// <summary>
        /// List prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of all prompts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VideoEmailPrompt&gt;</returns>
        ApiResponse<List<VideoEmailPrompt>> GetVideoEmailPromptsWithHttpInfo ();
        /// <summary>
        /// Respond to a prompt
        /// </summary>
        /// <remarks>
        /// Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>VideoEmailPrompt</returns>
        VideoEmailPrompt RespondToVideoEmailPrompt (string id, string choice, string videoId = null, string emailId = null);

        /// <summary>
        /// Respond to a prompt
        /// </summary>
        /// <remarks>
        /// Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        ApiResponse<VideoEmailPrompt> RespondToVideoEmailPromptWithHttpInfo (string id, string choice, string videoId = null, string emailId = null);
        /// <summary>
        /// Update Prompt Bot
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Bot&#39;s settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>PromptBotBot</returns>
        PromptBotBot UpdatePromptBot (string id, string emailId = null, string endDate = null, string status = null);

        /// <summary>
        /// Update Prompt Bot
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Bot&#39;s settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>ApiResponse of PromptBotBot</returns>
        ApiResponse<PromptBotBot> UpdatePromptBotWithHttpInfo (string id, string emailId = null, string endDate = null, string status = null);
        /// <summary>
        /// Update Prompt Campaign
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Campaign&#39;s Settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns></returns>
        void UpdatePromptCampaign (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null);

        /// <summary>
        /// Update Prompt Campaign
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Campaign&#39;s Settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePromptCampaignWithHttpInfo (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a running Prompt Bot for a list
        /// </summary>
        /// <remarks>
        /// Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>Task of PromptBotBot</returns>
        System.Threading.Tasks.Task<PromptBotBot> CreatePromptBotAsync (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId);

        /// <summary>
        /// Create a running Prompt Bot for a list
        /// </summary>
        /// <remarks>
        /// Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>Task of ApiResponse (PromptBotBot)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromptBotBot>> CreatePromptBotAsyncWithHttpInfo (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId);
        /// <summary>
        /// Prompts user to send a video
        /// </summary>
        /// <remarks>
        /// Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        System.Threading.Tasks.Task<VideoEmailPrompt> CreateVideoEmailPromptAsync (VideoEmailPrompt prompt);

        /// <summary>
        /// Prompts user to send a video
        /// </summary>
        /// <remarks>
        /// Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> CreateVideoEmailPromptAsyncWithHttpInfo (VideoEmailPrompt prompt);
        /// <summary>
        /// List pending prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VideoEmailPrompt&gt;</returns>
        System.Threading.Tasks.Task<List<VideoEmailPrompt>> GetPendingVideoEmailPromptsAsync ();

        /// <summary>
        /// List pending prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VideoEmailPrompt&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VideoEmailPrompt>>> GetPendingVideoEmailPromptsAsyncWithHttpInfo ();
        /// <summary>
        /// List Prompt Bots
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Bots for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PromptBotBot&gt;</returns>
        System.Threading.Tasks.Task<List<PromptBotBot>> GetPromptBotsAsync ();

        /// <summary>
        /// List Prompt Bots
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Bots for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PromptBotBot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PromptBotBot>>> GetPromptBotsAsyncWithHttpInfo ();
        /// <summary>
        /// List Prompt Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Campaigns for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPromptCampaignsAsync ();

        /// <summary>
        /// List Prompt Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all Prompt Campaigns for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPromptCampaignsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a prompt
        /// </summary>
        /// <remarks>
        /// Gets a prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        System.Threading.Tasks.Task<VideoEmailPrompt> GetVideoEmailPromptAsync (string id);

        /// <summary>
        /// Gets a prompt
        /// </summary>
        /// <remarks>
        /// Gets a prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> GetVideoEmailPromptAsyncWithHttpInfo (string id);
        /// <summary>
        /// List prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of all prompts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VideoEmailPrompt&gt;</returns>
        System.Threading.Tasks.Task<List<VideoEmailPrompt>> GetVideoEmailPromptsAsync ();

        /// <summary>
        /// List prompts
        /// </summary>
        /// <remarks>
        /// Returns a list of all prompts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VideoEmailPrompt&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VideoEmailPrompt>>> GetVideoEmailPromptsAsyncWithHttpInfo ();
        /// <summary>
        /// Respond to a prompt
        /// </summary>
        /// <remarks>
        /// Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        System.Threading.Tasks.Task<VideoEmailPrompt> RespondToVideoEmailPromptAsync (string id, string choice, string videoId = null, string emailId = null);

        /// <summary>
        /// Respond to a prompt
        /// </summary>
        /// <remarks>
        /// Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> RespondToVideoEmailPromptAsyncWithHttpInfo (string id, string choice, string videoId = null, string emailId = null);
        /// <summary>
        /// Update Prompt Bot
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Bot&#39;s settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>Task of PromptBotBot</returns>
        System.Threading.Tasks.Task<PromptBotBot> UpdatePromptBotAsync (string id, string emailId = null, string endDate = null, string status = null);

        /// <summary>
        /// Update Prompt Bot
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Bot&#39;s settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>Task of ApiResponse (PromptBotBot)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromptBotBot>> UpdatePromptBotAsyncWithHttpInfo (string id, string emailId = null, string endDate = null, string status = null);
        /// <summary>
        /// Update Prompt Campaign
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Campaign&#39;s Settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePromptCampaignAsync (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null);

        /// <summary>
        /// Update Prompt Campaign
        /// </summary>
        /// <remarks>
        /// Updates a Prompt Campaign&#39;s Settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePromptCampaignAsyncWithHttpInfo (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PromptsApi : IPromptsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PromptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromptsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PromptsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a running Prompt Bot for a list Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>PromptBotBot</returns>
        public PromptBotBot CreatePromptBot (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId)
        {
             ApiResponse<PromptBotBot> localVarResponse = CreatePromptBotWithHttpInfo(listId, emailId, endDate, promptSubject, promptBody, botTypeId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a running Prompt Bot for a list Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>ApiResponse of PromptBotBot</returns>
        public ApiResponse< PromptBotBot > CreatePromptBotWithHttpInfo (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'promptSubject' is set
            if (promptSubject == null)
                throw new ApiException(400, "Missing required parameter 'promptSubject' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'promptBody' is set
            if (promptBody == null)
                throw new ApiException(400, "Missing required parameter 'promptBody' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'botTypeId' is set
            if (botTypeId == null)
                throw new ApiException(400, "Missing required parameter 'botTypeId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PromptsApi->CreatePromptBot");

            var localVarPath = "/prompts/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listId != null) localVarFormParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (endDate != null) localVarFormParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // form parameter
            if (promptSubject != null) localVarFormParams.Add("promptSubject", Configuration.ApiClient.ParameterToString(promptSubject)); // form parameter
            if (promptBody != null) localVarFormParams.Add("promptBody", Configuration.ApiClient.ParameterToString(promptBody)); // form parameter
            if (botTypeId != null) localVarFormParams.Add("botTypeId", Configuration.ApiClient.ParameterToString(botTypeId)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePromptBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptBotBot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PromptBotBot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptBotBot)));
            
        }

        /// <summary>
        /// Create a running Prompt Bot for a list Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>Task of PromptBotBot</returns>
        public async System.Threading.Tasks.Task<PromptBotBot> CreatePromptBotAsync (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId)
        {
             ApiResponse<PromptBotBot> localVarResponse = await CreatePromptBotAsyncWithHttpInfo(listId, emailId, endDate, promptSubject, promptBody, botTypeId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a running Prompt Bot for a list Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list id to attach the bot to.</param>
        /// <param name="emailId">The default email to use.</param>
        /// <param name="endDate">The time frame to complete sending to the list.</param>
        /// <param name="promptSubject">The prompt subject.</param>
        /// <param name="promptBody">The prompt script.</param>
        /// <param name="botTypeId">The type of bot to create.</param>
        /// <param name="templateId">The template used to create the email id.</param>
        /// <returns>Task of ApiResponse (PromptBotBot)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PromptBotBot>> CreatePromptBotAsyncWithHttpInfo (string listId, string emailId, string endDate, string promptSubject, string promptBody, string botTypeId, string templateId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'promptSubject' is set
            if (promptSubject == null)
                throw new ApiException(400, "Missing required parameter 'promptSubject' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'promptBody' is set
            if (promptBody == null)
                throw new ApiException(400, "Missing required parameter 'promptBody' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'botTypeId' is set
            if (botTypeId == null)
                throw new ApiException(400, "Missing required parameter 'botTypeId' when calling PromptsApi->CreatePromptBot");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PromptsApi->CreatePromptBot");

            var localVarPath = "/prompts/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listId != null) localVarFormParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (endDate != null) localVarFormParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // form parameter
            if (promptSubject != null) localVarFormParams.Add("promptSubject", Configuration.ApiClient.ParameterToString(promptSubject)); // form parameter
            if (promptBody != null) localVarFormParams.Add("promptBody", Configuration.ApiClient.ParameterToString(promptBody)); // form parameter
            if (botTypeId != null) localVarFormParams.Add("botTypeId", Configuration.ApiClient.ParameterToString(botTypeId)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePromptBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptBotBot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PromptBotBot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptBotBot)));
            
        }

        /// <summary>
        /// Prompts user to send a video Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>VideoEmailPrompt</returns>
        public VideoEmailPrompt CreateVideoEmailPrompt (VideoEmailPrompt prompt)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = CreateVideoEmailPromptWithHttpInfo(prompt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prompts user to send a video Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        public ApiResponse< VideoEmailPrompt > CreateVideoEmailPromptWithHttpInfo (VideoEmailPrompt prompt)
        {
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling PromptsApi->CreateVideoEmailPrompt");

            var localVarPath = "/prompt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (prompt != null && prompt.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prompt); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prompt; // byte array
            }

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// Prompts user to send a video Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        public async System.Threading.Tasks.Task<VideoEmailPrompt> CreateVideoEmailPromptAsync (VideoEmailPrompt prompt)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = await CreateVideoEmailPromptAsyncWithHttpInfo(prompt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prompts user to send a video Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prompt">The Video Email Prompt to be created</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> CreateVideoEmailPromptAsyncWithHttpInfo (VideoEmailPrompt prompt)
        {
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling PromptsApi->CreateVideoEmailPrompt");

            var localVarPath = "/prompt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (prompt != null && prompt.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(prompt); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prompt; // byte array
            }

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// List pending prompts Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VideoEmailPrompt&gt;</returns>
        public List<VideoEmailPrompt> GetPendingVideoEmailPrompts ()
        {
             ApiResponse<List<VideoEmailPrompt>> localVarResponse = GetPendingVideoEmailPromptsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List pending prompts Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VideoEmailPrompt&gt;</returns>
        public ApiResponse< List<VideoEmailPrompt> > GetPendingVideoEmailPromptsWithHttpInfo ()
        {

            var localVarPath = "/prompt/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingVideoEmailPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VideoEmailPrompt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VideoEmailPrompt>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VideoEmailPrompt>)));
            
        }

        /// <summary>
        /// List pending prompts Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VideoEmailPrompt&gt;</returns>
        public async System.Threading.Tasks.Task<List<VideoEmailPrompt>> GetPendingVideoEmailPromptsAsync ()
        {
             ApiResponse<List<VideoEmailPrompt>> localVarResponse = await GetPendingVideoEmailPromptsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List pending prompts Returns a list of prompts that have not been sent yet, and can still be customized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VideoEmailPrompt&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VideoEmailPrompt>>> GetPendingVideoEmailPromptsAsyncWithHttpInfo ()
        {

            var localVarPath = "/prompt/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingVideoEmailPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VideoEmailPrompt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VideoEmailPrompt>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VideoEmailPrompt>)));
            
        }

        /// <summary>
        /// List Prompt Bots Returns a list of all Prompt Bots for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PromptBotBot&gt;</returns>
        public List<PromptBotBot> GetPromptBots ()
        {
             ApiResponse<List<PromptBotBot>> localVarResponse = GetPromptBotsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Prompt Bots Returns a list of all Prompt Bots for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PromptBotBot&gt;</returns>
        public ApiResponse< List<PromptBotBot> > GetPromptBotsWithHttpInfo ()
        {

            var localVarPath = "/prompts/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromptBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PromptBotBot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PromptBotBot>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PromptBotBot>)));
            
        }

        /// <summary>
        /// List Prompt Bots Returns a list of all Prompt Bots for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PromptBotBot&gt;</returns>
        public async System.Threading.Tasks.Task<List<PromptBotBot>> GetPromptBotsAsync ()
        {
             ApiResponse<List<PromptBotBot>> localVarResponse = await GetPromptBotsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Prompt Bots Returns a list of all Prompt Bots for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PromptBotBot&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PromptBotBot>>> GetPromptBotsAsyncWithHttpInfo ()
        {

            var localVarPath = "/prompts/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromptBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PromptBotBot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PromptBotBot>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PromptBotBot>)));
            
        }

        /// <summary>
        /// List Prompt Campaigns Returns a list of all Prompt Campaigns for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPromptCampaigns ()
        {
             GetPromptCampaignsWithHttpInfo();
        }

        /// <summary>
        /// List Prompt Campaigns Returns a list of all Prompt Campaigns for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPromptCampaignsWithHttpInfo ()
        {

            var localVarPath = "/prompts/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromptCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Prompt Campaigns Returns a list of all Prompt Campaigns for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPromptCampaignsAsync ()
        {
             await GetPromptCampaignsAsyncWithHttpInfo();

        }

        /// <summary>
        /// List Prompt Campaigns Returns a list of all Prompt Campaigns for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPromptCampaignsAsyncWithHttpInfo ()
        {

            var localVarPath = "/prompts/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromptCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a prompt Gets a prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>VideoEmailPrompt</returns>
        public VideoEmailPrompt GetVideoEmailPrompt (string id)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = GetVideoEmailPromptWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a prompt Gets a prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        public ApiResponse< VideoEmailPrompt > GetVideoEmailPromptWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->GetVideoEmailPrompt");

            var localVarPath = "/prompt/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// Gets a prompt Gets a prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        public async System.Threading.Tasks.Task<VideoEmailPrompt> GetVideoEmailPromptAsync (string id)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = await GetVideoEmailPromptAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a prompt Gets a prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the prompt</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> GetVideoEmailPromptAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->GetVideoEmailPrompt");

            var localVarPath = "/prompt/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// List prompts Returns a list of all prompts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VideoEmailPrompt&gt;</returns>
        public List<VideoEmailPrompt> GetVideoEmailPrompts ()
        {
             ApiResponse<List<VideoEmailPrompt>> localVarResponse = GetVideoEmailPromptsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List prompts Returns a list of all prompts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VideoEmailPrompt&gt;</returns>
        public ApiResponse< List<VideoEmailPrompt> > GetVideoEmailPromptsWithHttpInfo ()
        {

            var localVarPath = "/prompt/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoEmailPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VideoEmailPrompt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VideoEmailPrompt>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VideoEmailPrompt>)));
            
        }

        /// <summary>
        /// List prompts Returns a list of all prompts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VideoEmailPrompt&gt;</returns>
        public async System.Threading.Tasks.Task<List<VideoEmailPrompt>> GetVideoEmailPromptsAsync ()
        {
             ApiResponse<List<VideoEmailPrompt>> localVarResponse = await GetVideoEmailPromptsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List prompts Returns a list of all prompts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VideoEmailPrompt&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VideoEmailPrompt>>> GetVideoEmailPromptsAsyncWithHttpInfo ()
        {

            var localVarPath = "/prompt/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoEmailPrompts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VideoEmailPrompt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VideoEmailPrompt>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VideoEmailPrompt>)));
            
        }

        /// <summary>
        /// Respond to a prompt Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>VideoEmailPrompt</returns>
        public VideoEmailPrompt RespondToVideoEmailPrompt (string id, string choice, string videoId = null, string emailId = null)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = RespondToVideoEmailPromptWithHttpInfo(id, choice, videoId, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Respond to a prompt Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>ApiResponse of VideoEmailPrompt</returns>
        public ApiResponse< VideoEmailPrompt > RespondToVideoEmailPromptWithHttpInfo (string id, string choice, string videoId = null, string emailId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->RespondToVideoEmailPrompt");
            // verify the required parameter 'choice' is set
            if (choice == null)
                throw new ApiException(400, "Missing required parameter 'choice' when calling PromptsApi->RespondToVideoEmailPrompt");

            var localVarPath = "/prompt/{id}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (choice != null) localVarFormParams.Add("choice", Configuration.ApiClient.ParameterToString(choice)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RespondToVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// Respond to a prompt Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>Task of VideoEmailPrompt</returns>
        public async System.Threading.Tasks.Task<VideoEmailPrompt> RespondToVideoEmailPromptAsync (string id, string choice, string videoId = null, string emailId = null)
        {
             ApiResponse<VideoEmailPrompt> localVarResponse = await RespondToVideoEmailPromptAsyncWithHttpInfo(id, choice, videoId, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Respond to a prompt Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the prompt.</param>
        /// <param name="choice">The users&#39; selection. Can be: WithVideo, WithEmail, Cancel</param>
        /// <param name="videoId">The id of the video. (optional)</param>
        /// <param name="emailId">The id of the video. (optional)</param>
        /// <returns>Task of ApiResponse (VideoEmailPrompt)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoEmailPrompt>> RespondToVideoEmailPromptAsyncWithHttpInfo (string id, string choice, string videoId = null, string emailId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->RespondToVideoEmailPrompt");
            // verify the required parameter 'choice' is set
            if (choice == null)
                throw new ApiException(400, "Missing required parameter 'choice' when calling PromptsApi->RespondToVideoEmailPrompt");

            var localVarPath = "/prompt/{id}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (choice != null) localVarFormParams.Add("choice", Configuration.ApiClient.ParameterToString(choice)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RespondToVideoEmailPrompt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoEmailPrompt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoEmailPrompt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoEmailPrompt)));
            
        }

        /// <summary>
        /// Update Prompt Bot Updates a Prompt Bot&#39;s settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>PromptBotBot</returns>
        public PromptBotBot UpdatePromptBot (string id, string emailId = null, string endDate = null, string status = null)
        {
             ApiResponse<PromptBotBot> localVarResponse = UpdatePromptBotWithHttpInfo(id, emailId, endDate, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Prompt Bot Updates a Prompt Bot&#39;s settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>ApiResponse of PromptBotBot</returns>
        public ApiResponse< PromptBotBot > UpdatePromptBotWithHttpInfo (string id, string emailId = null, string endDate = null, string status = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->UpdatePromptBot");

            var localVarPath = "/prompts/bots/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (endDate != null) localVarFormParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePromptBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptBotBot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PromptBotBot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptBotBot)));
            
        }

        /// <summary>
        /// Update Prompt Bot Updates a Prompt Bot&#39;s settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>Task of PromptBotBot</returns>
        public async System.Threading.Tasks.Task<PromptBotBot> UpdatePromptBotAsync (string id, string emailId = null, string endDate = null, string status = null)
        {
             ApiResponse<PromptBotBot> localVarResponse = await UpdatePromptBotAsyncWithHttpInfo(id, emailId, endDate, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Prompt Bot Updates a Prompt Bot&#39;s settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The bot id.</param>
        /// <param name="emailId">The default email to use. (optional)</param>
        /// <param name="endDate">The time frame to complete sending to the list. (optional)</param>
        /// <param name="status">The status of the bot. (optional)</param>
        /// <returns>Task of ApiResponse (PromptBotBot)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PromptBotBot>> UpdatePromptBotAsyncWithHttpInfo (string id, string emailId = null, string endDate = null, string status = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PromptsApi->UpdatePromptBot");

            var localVarPath = "/prompts/bots/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (endDate != null) localVarFormParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePromptBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PromptBotBot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PromptBotBot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PromptBotBot)));
            
        }

        /// <summary>
        /// Update Prompt Campaign Updates a Prompt Campaign&#39;s Settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns></returns>
        public void UpdatePromptCampaign (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null)
        {
             UpdatePromptCampaignWithHttpInfo(clientGroupId, brandedTemplateId, personalTemplateId, enabled);
        }

        /// <summary>
        /// Update Prompt Campaign Updates a Prompt Campaign&#39;s Settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePromptCampaignWithHttpInfo (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null)
        {
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling PromptsApi->UpdatePromptCampaign");

            var localVarPath = "/prompts/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter
            if (brandedTemplateId != null) localVarFormParams.Add("brandedTemplateId", Configuration.ApiClient.ParameterToString(brandedTemplateId)); // form parameter
            if (personalTemplateId != null) localVarFormParams.Add("personalTemplateId", Configuration.ApiClient.ParameterToString(personalTemplateId)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePromptCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Prompt Campaign Updates a Prompt Campaign&#39;s Settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePromptCampaignAsync (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null)
        {
             await UpdatePromptCampaignAsyncWithHttpInfo(clientGroupId, brandedTemplateId, personalTemplateId, enabled);

        }

        /// <summary>
        /// Update Prompt Campaign Updates a Prompt Campaign&#39;s Settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">The client group of the campaign.</param>
        /// <param name="brandedTemplateId">The template to use for branded feel emails. (optional)</param>
        /// <param name="personalTemplateId">The template to use for personal feel emails. (optional)</param>
        /// <param name="enabled">Set whether the user is able to start receiving prompts. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePromptCampaignAsyncWithHttpInfo (string clientGroupId, string brandedTemplateId = null, string personalTemplateId = null, bool? enabled = null)
        {
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling PromptsApi->UpdatePromptCampaign");

            var localVarPath = "/prompts/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter
            if (brandedTemplateId != null) localVarFormParams.Add("brandedTemplateId", Configuration.ApiClient.ParameterToString(brandedTemplateId)); // form parameter
            if (personalTemplateId != null) localVarFormParams.Add("personalTemplateId", Configuration.ApiClient.ParameterToString(personalTemplateId)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePromptCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
