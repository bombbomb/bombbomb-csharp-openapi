/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The PromptOverview class
    /// </summary>
    [DataContract]
    public partial class PromptOverview :  IEquatable<PromptOverview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromptOverview" /> class.
        /// </summary>
        /// <param name="StartDate">The startDate property.</param>
        /// <param name="EndDate">The endDate property.</param>
        /// <param name="UserBatchListsIdHelper">The userBatchListsIdHelper property.</param>
        /// <param name="PromptIdHelper">The promptIdHelper property.</param>
        public PromptOverview(string StartDate = default(string), string EndDate = default(string), string UserBatchListsIdHelper = default(string), string PromptIdHelper = default(string))
        {
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.UserBatchListsIdHelper = UserBatchListsIdHelper;
            this.PromptIdHelper = PromptIdHelper;
        }
        
        /// <summary>
        /// The startDate property
        /// </summary>
        /// <value>The startDate property</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// The endDate property
        /// </summary>
        /// <value>The endDate property</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The userBatchListsIdHelper property
        /// </summary>
        /// <value>The userBatchListsIdHelper property</value>
        [DataMember(Name="userBatchListsIdHelper", EmitDefaultValue=false)]
        public string UserBatchListsIdHelper { get; set; }

        /// <summary>
        /// The promptIdHelper property
        /// </summary>
        /// <value>The promptIdHelper property</value>
        [DataMember(Name="promptIdHelper", EmitDefaultValue=false)]
        public string PromptIdHelper { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromptOverview {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  UserBatchListsIdHelper: ").Append(UserBatchListsIdHelper).Append("\n");
            sb.Append("  PromptIdHelper: ").Append(PromptIdHelper).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromptOverview);
        }

        /// <summary>
        /// Returns true if PromptOverview instances are equal
        /// </summary>
        /// <param name="input">Instance of PromptOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromptOverview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.UserBatchListsIdHelper == input.UserBatchListsIdHelper ||
                    (this.UserBatchListsIdHelper != null &&
                    this.UserBatchListsIdHelper.Equals(input.UserBatchListsIdHelper))
                ) && 
                (
                    this.PromptIdHelper == input.PromptIdHelper ||
                    (this.PromptIdHelper != null &&
                    this.PromptIdHelper.Equals(input.PromptIdHelper))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.UserBatchListsIdHelper != null)
                    hashCode = hashCode * 59 + this.UserBatchListsIdHelper.GetHashCode();
                if (this.PromptIdHelper != null)
                    hashCode = hashCode * 59 + this.PromptIdHelper.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
