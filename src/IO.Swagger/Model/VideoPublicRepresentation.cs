/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The VideoPublicRepresentation class
    /// </summary>
    [DataContract]
    public partial class VideoPublicRepresentation :  IEquatable<VideoPublicRepresentation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoPublicRepresentation" /> class.
        /// </summary>
        /// <param name="Id">The id of the video.</param>
        /// <param name="UserId">The is of the owning user.</param>
        /// <param name="Status">The status of the video.</param>
        /// <param name="Name">The name of the video.</param>
        /// <param name="Description">A description of the video.</param>
        /// <param name="ThumbUrl">The url of the thumbnail for the video.</param>
        /// <param name="VideoUrls">Urls to different formats of the video.</param>
        /// <param name="ShortUrl">The url to use to link to the video.</param>
        /// <param name="Height">The height of the video in pixels.</param>
        /// <param name="Width">The width of the video in pixels.</param>
        /// <param name="UploadDate">The date the video was uploaded.</param>
        public VideoPublicRepresentation(string Id = null, string UserId = null, string Status = null, string Name = null, string Description = null, string ThumbUrl = null, List<string> VideoUrls = null, string ShortUrl = null, int? Height = null, int? Width = null, string UploadDate = null)
        {
            this.Id = Id;
            this.UserId = UserId;
            this.Status = Status;
            this.Name = Name;
            this.Description = Description;
            this.ThumbUrl = ThumbUrl;
            this.VideoUrls = VideoUrls;
            this.ShortUrl = ShortUrl;
            this.Height = Height;
            this.Width = Width;
            this.UploadDate = UploadDate;
        }
        
        /// <summary>
        /// The id of the video
        /// </summary>
        /// <value>The id of the video</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The is of the owning user
        /// </summary>
        /// <value>The is of the owning user</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// The status of the video
        /// </summary>
        /// <value>The status of the video</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The name of the video
        /// </summary>
        /// <value>The name of the video</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// A description of the video
        /// </summary>
        /// <value>A description of the video</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The url of the thumbnail for the video
        /// </summary>
        /// <value>The url of the thumbnail for the video</value>
        [DataMember(Name="thumbUrl", EmitDefaultValue=false)]
        public string ThumbUrl { get; set; }
        /// <summary>
        /// Urls to different formats of the video
        /// </summary>
        /// <value>Urls to different formats of the video</value>
        [DataMember(Name="videoUrls", EmitDefaultValue=false)]
        public List<string> VideoUrls { get; set; }
        /// <summary>
        /// The url to use to link to the video
        /// </summary>
        /// <value>The url to use to link to the video</value>
        [DataMember(Name="shortUrl", EmitDefaultValue=false)]
        public string ShortUrl { get; set; }
        /// <summary>
        /// The height of the video in pixels
        /// </summary>
        /// <value>The height of the video in pixels</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// The width of the video in pixels
        /// </summary>
        /// <value>The width of the video in pixels</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// The date the video was uploaded
        /// </summary>
        /// <value>The date the video was uploaded</value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public string UploadDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoPublicRepresentation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ThumbUrl: ").Append(ThumbUrl).Append("\n");
            sb.Append("  VideoUrls: ").Append(VideoUrls).Append("\n");
            sb.Append("  ShortUrl: ").Append(ShortUrl).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VideoPublicRepresentation);
        }

        /// <summary>
        /// Returns true if VideoPublicRepresentation instances are equal
        /// </summary>
        /// <param name="other">Instance of VideoPublicRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoPublicRepresentation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ThumbUrl == other.ThumbUrl ||
                    this.ThumbUrl != null &&
                    this.ThumbUrl.Equals(other.ThumbUrl)
                ) && 
                (
                    this.VideoUrls == other.VideoUrls ||
                    this.VideoUrls != null &&
                    this.VideoUrls.SequenceEqual(other.VideoUrls)
                ) && 
                (
                    this.ShortUrl == other.ShortUrl ||
                    this.ShortUrl != null &&
                    this.ShortUrl.Equals(other.ShortUrl)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.UploadDate == other.UploadDate ||
                    this.UploadDate != null &&
                    this.UploadDate.Equals(other.UploadDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ThumbUrl != null)
                    hash = hash * 59 + this.ThumbUrl.GetHashCode();
                if (this.VideoUrls != null)
                    hash = hash * 59 + this.VideoUrls.GetHashCode();
                if (this.ShortUrl != null)
                    hash = hash * 59 + this.ShortUrl.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.UploadDate != null)
                    hash = hash * 59 + this.UploadDate.GetHashCode();
                return hash;
            }
        }
    }

}
