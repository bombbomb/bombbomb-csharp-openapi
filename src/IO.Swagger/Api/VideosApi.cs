/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Live Video Recorder HTML
        /// </summary>
        /// <remarks>
        /// Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>VideoRecorderMethodResponse</returns>
        VideoRecorderMethodResponse GetVideoRecorder (int? width = null, string videoId = null);

        /// <summary>
        /// Get Live Video Recorder HTML
        /// </summary>
        /// <remarks>
        /// Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>ApiResponse of VideoRecorderMethodResponse</returns>
        ApiResponse<VideoRecorderMethodResponse> GetVideoRecorderWithHttpInfo (int? width = null, string videoId = null);
        /// <summary>
        /// Completes a live recording
        /// </summary>
        /// <remarks>
        /// Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>VideoPublicRepresentation</returns>
        VideoPublicRepresentation MarkLiveRecordingComplete (string videoId, string filename, string title);

        /// <summary>
        /// Completes a live recording
        /// </summary>
        /// <remarks>
        /// Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>ApiResponse of VideoPublicRepresentation</returns>
        ApiResponse<VideoPublicRepresentation> MarkLiveRecordingCompleteWithHttpInfo (string videoId, string filename, string title);
        /// <summary>
        /// Generate Signed Url
        /// </summary>
        /// <remarks>
        /// Generates a signed url to be used for video uploads.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>string</returns>
        string SignUpload (SignUploadRequest policy, bool? v4 = null);

        /// <summary>
        /// Generate Signed Url
        /// </summary>
        /// <remarks>
        /// Generates a signed url to be used for video uploads.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SignUploadWithHttpInfo (SignUploadRequest policy, bool? v4 = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Live Video Recorder HTML
        /// </summary>
        /// <remarks>
        /// Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>Task of VideoRecorderMethodResponse</returns>
        System.Threading.Tasks.Task<VideoRecorderMethodResponse> GetVideoRecorderAsync (int? width = null, string videoId = null);

        /// <summary>
        /// Get Live Video Recorder HTML
        /// </summary>
        /// <remarks>
        /// Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>Task of ApiResponse (VideoRecorderMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoRecorderMethodResponse>> GetVideoRecorderAsyncWithHttpInfo (int? width = null, string videoId = null);
        /// <summary>
        /// Completes a live recording
        /// </summary>
        /// <remarks>
        /// Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>Task of VideoPublicRepresentation</returns>
        System.Threading.Tasks.Task<VideoPublicRepresentation> MarkLiveRecordingCompleteAsync (string videoId, string filename, string title);

        /// <summary>
        /// Completes a live recording
        /// </summary>
        /// <remarks>
        /// Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>Task of ApiResponse (VideoPublicRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoPublicRepresentation>> MarkLiveRecordingCompleteAsyncWithHttpInfo (string videoId, string filename, string title);
        /// <summary>
        /// Generate Signed Url
        /// </summary>
        /// <remarks>
        /// Generates a signed url to be used for video uploads.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SignUploadAsync (SignUploadRequest policy, bool? v4 = null);

        /// <summary>
        /// Generate Signed Url
        /// </summary>
        /// <remarks>
        /// Generates a signed url to be used for video uploads.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SignUploadAsyncWithHttpInfo (SignUploadRequest policy, bool? v4 = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosApi : IVideosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Live Video Recorder HTML Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>VideoRecorderMethodResponse</returns>
        public VideoRecorderMethodResponse GetVideoRecorder (int? width = null, string videoId = null)
        {
             ApiResponse<VideoRecorderMethodResponse> localVarResponse = GetVideoRecorderWithHttpInfo(width, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Live Video Recorder HTML Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>ApiResponse of VideoRecorderMethodResponse</returns>
        public ApiResponse< VideoRecorderMethodResponse > GetVideoRecorderWithHttpInfo (int? width = null, string videoId = null)
        {

            var localVarPath = "/videos/live/getRecorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (videoId != null) localVarQueryParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoRecorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoRecorderMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoRecorderMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoRecorderMethodResponse)));
            
        }

        /// <summary>
        /// Get Live Video Recorder HTML Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>Task of VideoRecorderMethodResponse</returns>
        public async System.Threading.Tasks.Task<VideoRecorderMethodResponse> GetVideoRecorderAsync (int? width = null, string videoId = null)
        {
             ApiResponse<VideoRecorderMethodResponse> localVarResponse = await GetVideoRecorderAsyncWithHttpInfo(width, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Live Video Recorder HTML Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="width">The width of the recorder to present. (optional)</param>
        /// <param name="videoId">The id of the video to record (optional)</param>
        /// <returns>Task of ApiResponse (VideoRecorderMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoRecorderMethodResponse>> GetVideoRecorderAsyncWithHttpInfo (int? width = null, string videoId = null)
        {

            var localVarPath = "/videos/live/getRecorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (videoId != null) localVarQueryParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoRecorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoRecorderMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoRecorderMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoRecorderMethodResponse)));
            
        }

        /// <summary>
        /// Completes a live recording Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>VideoPublicRepresentation</returns>
        public VideoPublicRepresentation MarkLiveRecordingComplete (string videoId, string filename, string title)
        {
             ApiResponse<VideoPublicRepresentation> localVarResponse = MarkLiveRecordingCompleteWithHttpInfo(videoId, filename, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completes a live recording Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>ApiResponse of VideoPublicRepresentation</returns>
        public ApiResponse< VideoPublicRepresentation > MarkLiveRecordingCompleteWithHttpInfo (string videoId, string filename, string title)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->MarkLiveRecordingComplete");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling VideosApi->MarkLiveRecordingComplete");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling VideosApi->MarkLiveRecordingComplete");

            var localVarPath = "/videos/live/markComplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (filename != null) localVarFormParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkLiveRecordingComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoPublicRepresentation)));
            
        }

        /// <summary>
        /// Completes a live recording Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>Task of VideoPublicRepresentation</returns>
        public async System.Threading.Tasks.Task<VideoPublicRepresentation> MarkLiveRecordingCompleteAsync (string videoId, string filename, string title)
        {
             ApiResponse<VideoPublicRepresentation> localVarResponse = await MarkLiveRecordingCompleteAsyncWithHttpInfo(videoId, filename, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completes a live recording Used in conjunction with the live recorder method to mark a video recording as complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The id of the video to mark as done.</param>
        /// <param name="filename">The filename that was chosen as the final video.</param>
        /// <param name="title">The title to give the video</param>
        /// <returns>Task of ApiResponse (VideoPublicRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoPublicRepresentation>> MarkLiveRecordingCompleteAsyncWithHttpInfo (string videoId, string filename, string title)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->MarkLiveRecordingComplete");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling VideosApi->MarkLiveRecordingComplete");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling VideosApi->MarkLiveRecordingComplete");

            var localVarPath = "/videos/live/markComplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (filename != null) localVarFormParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkLiveRecordingComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoPublicRepresentation)));
            
        }

        /// <summary>
        /// Generate Signed Url Generates a signed url to be used for video uploads.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>string</returns>
        public string SignUpload (SignUploadRequest policy, bool? v4 = null)
        {
             ApiResponse<string> localVarResponse = SignUploadWithHttpInfo(policy, v4);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Signed Url Generates a signed url to be used for video uploads.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SignUploadWithHttpInfo (SignUploadRequest policy, bool? v4 = null)
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling VideosApi->SignUpload");

            var localVarPath = "/video/signedUpload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (v4 != null) localVarFormParams.Add("v4", Configuration.ApiClient.ParameterToString(v4)); // form parameter
            if (policy != null && policy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(policy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Generate Signed Url Generates a signed url to be used for video uploads.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SignUploadAsync (SignUploadRequest policy, bool? v4 = null)
        {
             ApiResponse<string> localVarResponse = await SignUploadAsyncWithHttpInfo(policy, v4);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Signed Url Generates a signed url to be used for video uploads.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy">The policy to sign</param>
        /// <param name="v4">Whether to do v4 signing (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SignUploadAsyncWithHttpInfo (SignUploadRequest policy, bool? v4 = null)
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling VideosApi->SignUpload");

            var localVarPath = "/video/signedUpload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (v4 != null) localVarFormParams.Add("v4", Configuration.ApiClient.ParameterToString(v4)); // form parameter
            if (policy != null && policy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(policy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
