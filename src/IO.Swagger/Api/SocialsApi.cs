/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets facebook pages
        /// </summary>
        /// <remarks>
        /// Gets facebook pages by client id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetFacebookPages ();

        /// <summary>
        /// Gets facebook pages
        /// </summary>
        /// <remarks>
        /// Gets facebook pages by client id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFacebookPagesWithHttpInfo ();
        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns></returns>
        void GetSocialArticleProperties (string emailId, string socialContentId);

        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialArticlePropertiesWithHttpInfo (string emailId, string socialContentId);
        /// <summary>
        /// Get authorizations for all social integration
        /// </summary>
        /// <remarks>
        /// Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns></returns>
        void GetSocialAuthorizations (string clientGroupId = null);

        /// <summary>
        /// Get authorizations for all social integration
        /// </summary>
        /// <remarks>
        /// Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialAuthorizationsWithHttpInfo (string clientGroupId = null);
        /// <summary>
        /// Gets the profile properties
        /// </summary>
        /// <remarks>
        /// Gets the social profile properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns></returns>
        void GetSocialProfileProperties (string socialType);

        /// <summary>
        /// Gets the profile properties
        /// </summary>
        /// <remarks>
        /// Gets the social profile properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialProfilePropertiesWithHttpInfo (string socialType);
        /// <summary>
        /// Get social stats for a prompt
        /// </summary>
        /// <remarks>
        /// Get social stats for a prompt by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns></returns>
        void GetSocialStats (string promptId);

        /// <summary>
        /// Get social stats for a prompt
        /// </summary>
        /// <remarks>
        /// Get social stats for a prompt by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialStatsWithHttpInfo (string promptId);
        /// <summary>
        /// Creates social content
        /// </summary>
        /// <remarks>
        /// Creates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns></returns>
        void PostSocialContent (string emailId);

        /// <summary>
        /// Creates social content
        /// </summary>
        /// <remarks>
        /// Creates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSocialContentWithHttpInfo (string emailId);
        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content that failed for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns></returns>
        void RetrySocialSend (string promptId);

        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content that failed for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RetrySocialSendWithHttpInfo (string promptId);
        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns></returns>
        void SendSocial (string promptId, string socialType);

        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendSocialWithHttpInfo (string promptId, string socialType);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns></returns>
        void UpdateClientGroupSendMechanism (string sendMechanism, string clientGroupId, string enabled = null);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateClientGroupSendMechanismWithHttpInfo (string sendMechanism, string clientGroupId, string enabled = null);
        /// <summary>
        /// Toggles the prompt campaigns in a users account
        /// </summary>
        /// <remarks>
        /// Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns></returns>
        void UpdateClientGroupsSendMechanism (string sendMechanism, string enabled);

        /// <summary>
        /// Toggles the prompt campaigns in a users account
        /// </summary>
        /// <remarks>
        /// Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateClientGroupsSendMechanismWithHttpInfo (string sendMechanism, string enabled);
        /// <summary>
        /// Updates facebook page Ids
        /// </summary>
        /// <remarks>
        /// Updates facebook page Ids to be sent to for prompts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns></returns>
        void UpdateFacebookPages (string pageIds);

        /// <summary>
        /// Updates facebook page Ids
        /// </summary>
        /// <remarks>
        /// Updates facebook page Ids to be sent to for prompts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFacebookPagesWithHttpInfo (string pageIds);
        /// <summary>
        /// Updates social content
        /// </summary>
        /// <remarks>
        /// Updates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns></returns>
        void UpdateSocialContent (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null);

        /// <summary>
        /// Updates social content
        /// </summary>
        /// <remarks>
        /// Updates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSocialContentWithHttpInfo (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets facebook pages
        /// </summary>
        /// <remarks>
        /// Gets facebook pages by client id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFacebookPagesAsync ();

        /// <summary>
        /// Gets facebook pages
        /// </summary>
        /// <remarks>
        /// Gets facebook pages by client id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFacebookPagesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialArticlePropertiesAsync (string emailId, string socialContentId);

        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialArticlePropertiesAsyncWithHttpInfo (string emailId, string socialContentId);
        /// <summary>
        /// Get authorizations for all social integration
        /// </summary>
        /// <remarks>
        /// Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialAuthorizationsAsync (string clientGroupId = null);

        /// <summary>
        /// Get authorizations for all social integration
        /// </summary>
        /// <remarks>
        /// Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialAuthorizationsAsyncWithHttpInfo (string clientGroupId = null);
        /// <summary>
        /// Gets the profile properties
        /// </summary>
        /// <remarks>
        /// Gets the social profile properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialProfilePropertiesAsync (string socialType);

        /// <summary>
        /// Gets the profile properties
        /// </summary>
        /// <remarks>
        /// Gets the social profile properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialProfilePropertiesAsyncWithHttpInfo (string socialType);
        /// <summary>
        /// Get social stats for a prompt
        /// </summary>
        /// <remarks>
        /// Get social stats for a prompt by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialStatsAsync (string promptId);

        /// <summary>
        /// Get social stats for a prompt
        /// </summary>
        /// <remarks>
        /// Get social stats for a prompt by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialStatsAsyncWithHttpInfo (string promptId);
        /// <summary>
        /// Creates social content
        /// </summary>
        /// <remarks>
        /// Creates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostSocialContentAsync (string emailId);

        /// <summary>
        /// Creates social content
        /// </summary>
        /// <remarks>
        /// Creates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostSocialContentAsyncWithHttpInfo (string emailId);
        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content that failed for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RetrySocialSendAsync (string promptId);

        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content that failed for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetrySocialSendAsyncWithHttpInfo (string promptId);
        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendSocialAsync (string promptId, string socialType);

        /// <summary>
        /// Sends social content
        /// </summary>
        /// <remarks>
        /// Sends social content for a user via their associated prompt
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendSocialAsyncWithHttpInfo (string promptId, string socialType);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateClientGroupSendMechanismAsync (string sendMechanism, string clientGroupId, string enabled = null);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientGroupSendMechanismAsyncWithHttpInfo (string sendMechanism, string clientGroupId, string enabled = null);
        /// <summary>
        /// Toggles the prompt campaigns in a users account
        /// </summary>
        /// <remarks>
        /// Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateClientGroupsSendMechanismAsync (string sendMechanism, string enabled);

        /// <summary>
        /// Toggles the prompt campaigns in a users account
        /// </summary>
        /// <remarks>
        /// Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientGroupsSendMechanismAsyncWithHttpInfo (string sendMechanism, string enabled);
        /// <summary>
        /// Updates facebook page Ids
        /// </summary>
        /// <remarks>
        /// Updates facebook page Ids to be sent to for prompts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFacebookPagesAsync (string pageIds);

        /// <summary>
        /// Updates facebook page Ids
        /// </summary>
        /// <remarks>
        /// Updates facebook page Ids to be sent to for prompts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFacebookPagesAsyncWithHttpInfo (string pageIds);
        /// <summary>
        /// Updates social content
        /// </summary>
        /// <remarks>
        /// Updates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSocialContentAsync (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null);

        /// <summary>
        /// Updates social content
        /// </summary>
        /// <remarks>
        /// Updates social content for an email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialContentAsyncWithHttpInfo (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SocialsApi : ISocialsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets facebook pages Gets facebook pages by client id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetFacebookPages ()
        {
             GetFacebookPagesWithHttpInfo();
        }

        /// <summary>
        /// Gets facebook pages Gets facebook pages by client id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFacebookPagesWithHttpInfo ()
        {

            var localVarPath = "/socials/facebook/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFacebookPages", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets facebook pages Gets facebook pages by client id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFacebookPagesAsync ()
        {
             await GetFacebookPagesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Gets facebook pages Gets facebook pages by client id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFacebookPagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/socials/facebook/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFacebookPages", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns></returns>
        public void GetSocialArticleProperties (string emailId, string socialContentId)
        {
             GetSocialArticlePropertiesWithHttpInfo(emailId, socialContentId);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialArticlePropertiesWithHttpInfo (string emailId, string socialContentId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'socialContentId' is set
            if (socialContentId == null)
                throw new ApiException(400, "Missing required parameter 'socialContentId' when calling SocialsApi->GetSocialArticleProperties");

            var localVarPath = "/socials/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarQueryParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // query parameter
            if (socialContentId != null) localVarQueryParams.Add("socialContentId", Configuration.ApiClient.ParameterToString(socialContentId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialArticleProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialArticlePropertiesAsync (string emailId, string socialContentId)
        {
             await GetSocialArticlePropertiesAsyncWithHttpInfo(emailId, socialContentId);

        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="socialContentId">This is the social content Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialArticlePropertiesAsyncWithHttpInfo (string emailId, string socialContentId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'socialContentId' is set
            if (socialContentId == null)
                throw new ApiException(400, "Missing required parameter 'socialContentId' when calling SocialsApi->GetSocialArticleProperties");

            var localVarPath = "/socials/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarQueryParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // query parameter
            if (socialContentId != null) localVarQueryParams.Add("socialContentId", Configuration.ApiClient.ParameterToString(socialContentId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialArticleProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get authorizations for all social integration Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns></returns>
        public void GetSocialAuthorizations (string clientGroupId = null)
        {
             GetSocialAuthorizationsWithHttpInfo(clientGroupId);
        }

        /// <summary>
        /// Get authorizations for all social integration Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialAuthorizationsWithHttpInfo (string clientGroupId = null)
        {

            var localVarPath = "/socials/authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarQueryParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialAuthorizations", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get authorizations for all social integration Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialAuthorizationsAsync (string clientGroupId = null)
        {
             await GetSocialAuthorizationsAsyncWithHttpInfo(clientGroupId);

        }

        /// <summary>
        /// Get authorizations for all social integration Get authorizations and autoshares for all social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialAuthorizationsAsyncWithHttpInfo (string clientGroupId = null)
        {

            var localVarPath = "/socials/authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarQueryParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialAuthorizations", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the profile properties Gets the social profile properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns></returns>
        public void GetSocialProfileProperties (string socialType)
        {
             GetSocialProfilePropertiesWithHttpInfo(socialType);
        }

        /// <summary>
        /// Gets the profile properties Gets the social profile properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialProfilePropertiesWithHttpInfo (string socialType)
        {
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->GetSocialProfileProperties");

            var localVarPath = "/socials/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialType != null) localVarQueryParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialProfileProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the profile properties Gets the social profile properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialProfilePropertiesAsync (string socialType)
        {
             await GetSocialProfilePropertiesAsyncWithHttpInfo(socialType);

        }

        /// <summary>
        /// Gets the profile properties Gets the social profile properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">The social type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialProfilePropertiesAsyncWithHttpInfo (string socialType)
        {
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->GetSocialProfileProperties");

            var localVarPath = "/socials/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialType != null) localVarQueryParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialProfileProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get social stats for a prompt Get social stats for a prompt by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns></returns>
        public void GetSocialStats (string promptId)
        {
             GetSocialStatsWithHttpInfo(promptId);
        }

        /// <summary>
        /// Get social stats for a prompt Get social stats for a prompt by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialStatsWithHttpInfo (string promptId)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->GetSocialStats");

            var localVarPath = "/socials/{promptId}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarPathParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialStats", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get social stats for a prompt Get social stats for a prompt by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialStatsAsync (string promptId)
        {
             await GetSocialStatsAsyncWithHttpInfo(promptId);

        }

        /// <summary>
        /// Get social stats for a prompt Get social stats for a prompt by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">ID of the prompt</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialStatsAsyncWithHttpInfo (string promptId)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->GetSocialStats");

            var localVarPath = "/socials/{promptId}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarPathParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialStats", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates social content Creates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns></returns>
        public void PostSocialContent (string emailId)
        {
             PostSocialContentWithHttpInfo(emailId);
        }

        /// <summary>
        /// Creates social content Creates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostSocialContentWithHttpInfo (string emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->PostSocialContent");

            var localVarPath = "/socials/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSocialContent", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates social content Creates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostSocialContentAsync (string emailId)
        {
             await PostSocialContentAsyncWithHttpInfo(emailId);

        }

        /// <summary>
        /// Creates social content Creates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">The email&#39;s id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostSocialContentAsyncWithHttpInfo (string emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->PostSocialContent");

            var localVarPath = "/socials/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSocialContent", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends social content Sends social content that failed for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns></returns>
        public void RetrySocialSend (string promptId)
        {
             RetrySocialSendWithHttpInfo(promptId);
        }

        /// <summary>
        /// Sends social content Sends social content that failed for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RetrySocialSendWithHttpInfo (string promptId)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->RetrySocialSend");

            var localVarPath = "/socials/send/retry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarFormParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrySocialSend", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends social content Sends social content that failed for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RetrySocialSendAsync (string promptId)
        {
             await RetrySocialSendAsyncWithHttpInfo(promptId);

        }

        /// <summary>
        /// Sends social content Sends social content that failed for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RetrySocialSendAsyncWithHttpInfo (string promptId)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->RetrySocialSend");

            var localVarPath = "/socials/send/retry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarFormParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrySocialSend", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends social content Sends social content for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns></returns>
        public void SendSocial (string promptId, string socialType)
        {
             SendSocialWithHttpInfo(promptId, socialType);
        }

        /// <summary>
        /// Sends social content Sends social content for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendSocialWithHttpInfo (string promptId, string socialType)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->SendSocial");
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->SendSocial");

            var localVarPath = "/socials/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarFormParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // form parameter
            if (socialType != null) localVarFormParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSocial", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends social content Sends social content for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendSocialAsync (string promptId, string socialType)
        {
             await SendSocialAsyncWithHttpInfo(promptId, socialType);

        }

        /// <summary>
        /// Sends social content Sends social content for a user via their associated prompt
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptId">The prompt id</param>
        /// <param name="socialType">The destination for social content</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendSocialAsyncWithHttpInfo (string promptId, string socialType)
        {
            // verify the required parameter 'promptId' is set
            if (promptId == null)
                throw new ApiException(400, "Missing required parameter 'promptId' when calling SocialsApi->SendSocial");
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->SendSocial");

            var localVarPath = "/socials/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (promptId != null) localVarFormParams.Add("promptId", Configuration.ApiClient.ParameterToString(promptId)); // form parameter
            if (socialType != null) localVarFormParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSocial", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns></returns>
        public void UpdateClientGroupSendMechanism (string sendMechanism, string clientGroupId, string enabled = null)
        {
             UpdateClientGroupSendMechanismWithHttpInfo(sendMechanism, clientGroupId, enabled);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateClientGroupSendMechanismWithHttpInfo (string sendMechanism, string clientGroupId, string enabled = null)
        {
            // verify the required parameter 'sendMechanism' is set
            if (sendMechanism == null)
                throw new ApiException(400, "Missing required parameter 'sendMechanism' when calling SocialsApi->UpdateClientGroupSendMechanism");
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->UpdateClientGroupSendMechanism");

            var localVarPath = "/socials/client/sendMechanism";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sendMechanism != null) localVarFormParams.Add("sendMechanism", Configuration.ApiClient.ParameterToString(sendMechanism)); // form parameter
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientGroupSendMechanism", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateClientGroupSendMechanismAsync (string sendMechanism, string clientGroupId, string enabled = null)
        {
             await UpdateClientGroupSendMechanismAsyncWithHttpInfo(sendMechanism, clientGroupId, enabled);

        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <param name="enabled">Is the send mechanism enabled? (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientGroupSendMechanismAsyncWithHttpInfo (string sendMechanism, string clientGroupId, string enabled = null)
        {
            // verify the required parameter 'sendMechanism' is set
            if (sendMechanism == null)
                throw new ApiException(400, "Missing required parameter 'sendMechanism' when calling SocialsApi->UpdateClientGroupSendMechanism");
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->UpdateClientGroupSendMechanism");

            var localVarPath = "/socials/client/sendMechanism";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sendMechanism != null) localVarFormParams.Add("sendMechanism", Configuration.ApiClient.ParameterToString(sendMechanism)); // form parameter
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientGroupSendMechanism", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Toggles the prompt campaigns in a users account Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns></returns>
        public void UpdateClientGroupsSendMechanism (string sendMechanism, string enabled)
        {
             UpdateClientGroupsSendMechanismWithHttpInfo(sendMechanism, enabled);
        }

        /// <summary>
        /// Toggles the prompt campaigns in a users account Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateClientGroupsSendMechanismWithHttpInfo (string sendMechanism, string enabled)
        {
            // verify the required parameter 'sendMechanism' is set
            if (sendMechanism == null)
                throw new ApiException(400, "Missing required parameter 'sendMechanism' when calling SocialsApi->UpdateClientGroupsSendMechanism");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling SocialsApi->UpdateClientGroupsSendMechanism");

            var localVarPath = "/socials/client/sendMechanisms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sendMechanism != null) localVarFormParams.Add("sendMechanism", Configuration.ApiClient.ParameterToString(sendMechanism)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientGroupsSendMechanism", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Toggles the prompt campaigns in a users account Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateClientGroupsSendMechanismAsync (string sendMechanism, string enabled)
        {
             await UpdateClientGroupsSendMechanismAsyncWithHttpInfo(sendMechanism, enabled);

        }

        /// <summary>
        /// Toggles the prompt campaigns in a users account Toggles the prompt campaigns in a users account for a social integrations on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMechanism">The send mechanism for the prompt</param>
        /// <param name="enabled">Is the send mechanism enabled?</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientGroupsSendMechanismAsyncWithHttpInfo (string sendMechanism, string enabled)
        {
            // verify the required parameter 'sendMechanism' is set
            if (sendMechanism == null)
                throw new ApiException(400, "Missing required parameter 'sendMechanism' when calling SocialsApi->UpdateClientGroupsSendMechanism");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling SocialsApi->UpdateClientGroupsSendMechanism");

            var localVarPath = "/socials/client/sendMechanisms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sendMechanism != null) localVarFormParams.Add("sendMechanism", Configuration.ApiClient.ParameterToString(sendMechanism)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientGroupsSendMechanism", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates facebook page Ids Updates facebook page Ids to be sent to for prompts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns></returns>
        public void UpdateFacebookPages (string pageIds)
        {
             UpdateFacebookPagesWithHttpInfo(pageIds);
        }

        /// <summary>
        /// Updates facebook page Ids Updates facebook page Ids to be sent to for prompts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFacebookPagesWithHttpInfo (string pageIds)
        {
            // verify the required parameter 'pageIds' is set
            if (pageIds == null)
                throw new ApiException(400, "Missing required parameter 'pageIds' when calling SocialsApi->UpdateFacebookPages");

            var localVarPath = "/socials/facebook/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageIds != null) localVarFormParams.Add("pageIds", Configuration.ApiClient.ParameterToString(pageIds)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFacebookPages", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates facebook page Ids Updates facebook page Ids to be sent to for prompts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFacebookPagesAsync (string pageIds)
        {
             await UpdateFacebookPagesAsyncWithHttpInfo(pageIds);

        }

        /// <summary>
        /// Updates facebook page Ids Updates facebook page Ids to be sent to for prompts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIds">Page Ids for the prompt</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFacebookPagesAsyncWithHttpInfo (string pageIds)
        {
            // verify the required parameter 'pageIds' is set
            if (pageIds == null)
                throw new ApiException(400, "Missing required parameter 'pageIds' when calling SocialsApi->UpdateFacebookPages");

            var localVarPath = "/socials/facebook/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageIds != null) localVarFormParams.Add("pageIds", Configuration.ApiClient.ParameterToString(pageIds)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFacebookPages", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates social content Updates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns></returns>
        public void UpdateSocialContent (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null)
        {
             UpdateSocialContentWithHttpInfo(socialId, title, description, pictureUrl, suggestedMessage);
        }

        /// <summary>
        /// Updates social content Updates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSocialContentWithHttpInfo (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null)
        {
            // verify the required parameter 'socialId' is set
            if (socialId == null)
                throw new ApiException(400, "Missing required parameter 'socialId' when calling SocialsApi->UpdateSocialContent");

            var localVarPath = "/socials/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialId != null) localVarFormParams.Add("socialId", Configuration.ApiClient.ParameterToString(socialId)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (pictureUrl != null) localVarFormParams.Add("pictureUrl", Configuration.ApiClient.ParameterToString(pictureUrl)); // form parameter
            if (suggestedMessage != null) localVarFormParams.Add("suggestedMessage", Configuration.ApiClient.ParameterToString(suggestedMessage)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialContent", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates social content Updates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSocialContentAsync (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null)
        {
             await UpdateSocialContentAsyncWithHttpInfo(socialId, title, description, pictureUrl, suggestedMessage);

        }

        /// <summary>
        /// Updates social content Updates social content for an email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialId">The social id</param>
        /// <param name="title">The title for the article (optional)</param>
        /// <param name="description">The article description (optional)</param>
        /// <param name="pictureUrl">The article picture url (optional)</param>
        /// <param name="suggestedMessage">The suggested message to use (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialContentAsyncWithHttpInfo (string socialId, string title = null, string description = null, string pictureUrl = null, string suggestedMessage = null)
        {
            // verify the required parameter 'socialId' is set
            if (socialId == null)
                throw new ApiException(400, "Missing required parameter 'socialId' when calling SocialsApi->UpdateSocialContent");

            var localVarPath = "/socials/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialId != null) localVarFormParams.Add("socialId", Configuration.ApiClient.ParameterToString(socialId)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (pictureUrl != null) localVarFormParams.Add("pictureUrl", Configuration.ApiClient.ParameterToString(pictureUrl)); // form parameter
            if (suggestedMessage != null) localVarFormParams.Add("suggestedMessage", Configuration.ApiClient.ParameterToString(suggestedMessage)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialContent", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
