/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add contacts from a CSV file.
        /// </summary>
        /// <remarks>
        /// Add multiple contacts through the upload importer from a CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns></returns>
        void AddContactsCSV (string mappingData, string listData);

        /// <summary>
        /// Add contacts from a CSV file.
        /// </summary>
        /// <remarks>
        /// Add multiple contacts through the upload importer from a CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddContactsCSVWithHttpInfo (string mappingData, string listData);
        /// <summary>
        /// Add a contact.
        /// </summary>
        /// <remarks>
        /// Add a contact to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns></returns>
        void AddNewContact (string contactEmail, string contactInfo = null);

        /// <summary>
        /// Add a contact.
        /// </summary>
        /// <remarks>
        /// Add a contact to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNewContactWithHttpInfo (string contactEmail, string contactInfo = null);
        /// <summary>
        /// Add custom fields.
        /// </summary>
        /// <remarks>
        /// Add a new custom field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns></returns>
        void AddNewCustomField (string fieldName, string fieldType = null);

        /// <summary>
        /// Add custom fields.
        /// </summary>
        /// <remarks>
        /// Add a new custom field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNewCustomFieldWithHttpInfo (string fieldName, string fieldType = null);
        /// <summary>
        /// Add pasted contacts.
        /// </summary>
        /// <remarks>
        /// Add the pasted contacts to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns></returns>
        void AddPastedContacts (string contactEmails, string listInfo = null);

        /// <summary>
        /// Add pasted contacts.
        /// </summary>
        /// <remarks>
        /// Add the pasted contacts to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPastedContactsWithHttpInfo (string contactEmails, string listInfo = null);
        /// <summary>
        /// Format CSV.
        /// </summary>
        /// <remarks>
        /// Format a CSV file to an object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns></returns>
        void CSVToObject (string file);

        /// <summary>
        /// Format CSV.
        /// </summary>
        /// <remarks>
        /// Format a CSV file to an object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CSVToObjectWithHttpInfo (string file);
        /// <summary>
        /// Delete Contacts
        /// </summary>
        /// <remarks>
        /// Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns></returns>
        void DeleteContacts (string listId = null, string contactIds = null);

        /// <summary>
        /// Delete Contacts
        /// </summary>
        /// <remarks>
        /// Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsWithHttpInfo (string listId = null, string contactIds = null);
        /// <summary>
        /// Get Contact Details
        /// </summary>
        /// <remarks>
        /// Get the contact details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns></returns>
        void GetContactById (string id);

        /// <summary>
        /// Get Contact Details
        /// </summary>
        /// <remarks>
        /// Get the contact details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContactByIdWithHttpInfo (string id);
        /// <summary>
        /// Get custom fields.
        /// </summary>
        /// <remarks>
        /// Get the current users custom fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetCustomFields ();

        /// <summary>
        /// Get custom fields.
        /// </summary>
        /// <remarks>
        /// Get the current users custom fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCustomFieldsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add contacts from a CSV file.
        /// </summary>
        /// <remarks>
        /// Add multiple contacts through the upload importer from a CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddContactsCSVAsync (string mappingData, string listData);

        /// <summary>
        /// Add contacts from a CSV file.
        /// </summary>
        /// <remarks>
        /// Add multiple contacts through the upload importer from a CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddContactsCSVAsyncWithHttpInfo (string mappingData, string listData);
        /// <summary>
        /// Add a contact.
        /// </summary>
        /// <remarks>
        /// Add a contact to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNewContactAsync (string contactEmail, string contactInfo = null);

        /// <summary>
        /// Add a contact.
        /// </summary>
        /// <remarks>
        /// Add a contact to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNewContactAsyncWithHttpInfo (string contactEmail, string contactInfo = null);
        /// <summary>
        /// Add custom fields.
        /// </summary>
        /// <remarks>
        /// Add a new custom field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNewCustomFieldAsync (string fieldName, string fieldType = null);

        /// <summary>
        /// Add custom fields.
        /// </summary>
        /// <remarks>
        /// Add a new custom field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNewCustomFieldAsyncWithHttpInfo (string fieldName, string fieldType = null);
        /// <summary>
        /// Add pasted contacts.
        /// </summary>
        /// <remarks>
        /// Add the pasted contacts to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPastedContactsAsync (string contactEmails, string listInfo = null);

        /// <summary>
        /// Add pasted contacts.
        /// </summary>
        /// <remarks>
        /// Add the pasted contacts to the users list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPastedContactsAsyncWithHttpInfo (string contactEmails, string listInfo = null);
        /// <summary>
        /// Format CSV.
        /// </summary>
        /// <remarks>
        /// Format a CSV file to an object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CSVToObjectAsync (string file);

        /// <summary>
        /// Format CSV.
        /// </summary>
        /// <remarks>
        /// Format a CSV file to an object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CSVToObjectAsyncWithHttpInfo (string file);
        /// <summary>
        /// Delete Contacts
        /// </summary>
        /// <remarks>
        /// Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsAsync (string listId = null, string contactIds = null);

        /// <summary>
        /// Delete Contacts
        /// </summary>
        /// <remarks>
        /// Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsAsyncWithHttpInfo (string listId = null, string contactIds = null);
        /// <summary>
        /// Get Contact Details
        /// </summary>
        /// <remarks>
        /// Get the contact details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContactByIdAsync (string id);

        /// <summary>
        /// Get Contact Details
        /// </summary>
        /// <remarks>
        /// Get the contact details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get custom fields.
        /// </summary>
        /// <remarks>
        /// Get the current users custom fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCustomFieldsAsync ();

        /// <summary>
        /// Get custom fields.
        /// </summary>
        /// <remarks>
        /// Get the current users custom fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomFieldsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add contacts from a CSV file. Add multiple contacts through the upload importer from a CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns></returns>
        public void AddContactsCSV (string mappingData, string listData)
        {
             AddContactsCSVWithHttpInfo(mappingData, listData);
        }

        /// <summary>
        /// Add contacts from a CSV file. Add multiple contacts through the upload importer from a CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddContactsCSVWithHttpInfo (string mappingData, string listData)
        {
            // verify the required parameter 'mappingData' is set
            if (mappingData == null)
                throw new ApiException(400, "Missing required parameter 'mappingData' when calling ContactsApi->AddContactsCSV");
            // verify the required parameter 'listData' is set
            if (listData == null)
                throw new ApiException(400, "Missing required parameter 'listData' when calling ContactsApi->AddContactsCSV");

            var localVarPath = "/contacts/import_csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mappingData != null) localVarFormParams.Add("mappingData", Configuration.ApiClient.ParameterToString(mappingData)); // form parameter
            if (listData != null) localVarFormParams.Add("listData", Configuration.ApiClient.ParameterToString(listData)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactsCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add contacts from a CSV file. Add multiple contacts through the upload importer from a CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddContactsCSVAsync (string mappingData, string listData)
        {
             await AddContactsCSVAsyncWithHttpInfo(mappingData, listData);

        }

        /// <summary>
        /// Add contacts from a CSV file. Add multiple contacts through the upload importer from a CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingData">The info sent for the contacts</param>
        /// <param name="listData">The info sent with the import for the list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddContactsCSVAsyncWithHttpInfo (string mappingData, string listData)
        {
            // verify the required parameter 'mappingData' is set
            if (mappingData == null)
                throw new ApiException(400, "Missing required parameter 'mappingData' when calling ContactsApi->AddContactsCSV");
            // verify the required parameter 'listData' is set
            if (listData == null)
                throw new ApiException(400, "Missing required parameter 'listData' when calling ContactsApi->AddContactsCSV");

            var localVarPath = "/contacts/import_csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (mappingData != null) localVarFormParams.Add("mappingData", Configuration.ApiClient.ParameterToString(mappingData)); // form parameter
            if (listData != null) localVarFormParams.Add("listData", Configuration.ApiClient.ParameterToString(listData)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactsCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a contact. Add a contact to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns></returns>
        public void AddNewContact (string contactEmail, string contactInfo = null)
        {
             AddNewContactWithHttpInfo(contactEmail, contactInfo);
        }

        /// <summary>
        /// Add a contact. Add a contact to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNewContactWithHttpInfo (string contactEmail, string contactInfo = null)
        {
            // verify the required parameter 'contactEmail' is set
            if (contactEmail == null)
                throw new ApiException(400, "Missing required parameter 'contactEmail' when calling ContactsApi->AddNewContact");

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactEmail != null) localVarFormParams.Add("contactEmail", Configuration.ApiClient.ParameterToString(contactEmail)); // form parameter
            if (contactInfo != null) localVarFormParams.Add("contactInfo", Configuration.ApiClient.ParameterToString(contactInfo)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNewContact", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a contact. Add a contact to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNewContactAsync (string contactEmail, string contactInfo = null)
        {
             await AddNewContactAsyncWithHttpInfo(contactEmail, contactInfo);

        }

        /// <summary>
        /// Add a contact. Add a contact to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmail">Email of the new contact we are adding</param>
        /// <param name="contactInfo">The info sent for this contact (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNewContactAsyncWithHttpInfo (string contactEmail, string contactInfo = null)
        {
            // verify the required parameter 'contactEmail' is set
            if (contactEmail == null)
                throw new ApiException(400, "Missing required parameter 'contactEmail' when calling ContactsApi->AddNewContact");

            var localVarPath = "/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactEmail != null) localVarFormParams.Add("contactEmail", Configuration.ApiClient.ParameterToString(contactEmail)); // form parameter
            if (contactInfo != null) localVarFormParams.Add("contactInfo", Configuration.ApiClient.ParameterToString(contactInfo)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNewContact", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add custom fields. Add a new custom field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns></returns>
        public void AddNewCustomField (string fieldName, string fieldType = null)
        {
             AddNewCustomFieldWithHttpInfo(fieldName, fieldType);
        }

        /// <summary>
        /// Add custom fields. Add a new custom field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNewCustomFieldWithHttpInfo (string fieldName, string fieldType = null)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ContactsApi->AddNewCustomField");

            var localVarPath = "/contacts/custom_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldName != null) localVarFormParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // form parameter
            if (fieldType != null) localVarFormParams.Add("fieldType", Configuration.ApiClient.ParameterToString(fieldType)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNewCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add custom fields. Add a new custom field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNewCustomFieldAsync (string fieldName, string fieldType = null)
        {
             await AddNewCustomFieldAsyncWithHttpInfo(fieldName, fieldType);

        }

        /// <summary>
        /// Add custom fields. Add a new custom field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Custom field name to be added</param>
        /// <param name="fieldType">Custom field type for the field to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNewCustomFieldAsyncWithHttpInfo (string fieldName, string fieldType = null)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ContactsApi->AddNewCustomField");

            var localVarPath = "/contacts/custom_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldName != null) localVarFormParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // form parameter
            if (fieldType != null) localVarFormParams.Add("fieldType", Configuration.ApiClient.ParameterToString(fieldType)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNewCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add pasted contacts. Add the pasted contacts to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns></returns>
        public void AddPastedContacts (string contactEmails, string listInfo = null)
        {
             AddPastedContactsWithHttpInfo(contactEmails, listInfo);
        }

        /// <summary>
        /// Add pasted contacts. Add the pasted contacts to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPastedContactsWithHttpInfo (string contactEmails, string listInfo = null)
        {
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->AddPastedContacts");

            var localVarPath = "/contacts/paste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactEmails != null) localVarFormParams.Add("contactEmails", Configuration.ApiClient.ParameterToString(contactEmails)); // form parameter
            if (listInfo != null) localVarFormParams.Add("listInfo", Configuration.ApiClient.ParameterToString(listInfo)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPastedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add pasted contacts. Add the pasted contacts to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPastedContactsAsync (string contactEmails, string listInfo = null)
        {
             await AddPastedContactsAsyncWithHttpInfo(contactEmails, listInfo);

        }

        /// <summary>
        /// Add pasted contacts. Add the pasted contacts to the users list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactEmails">Emails array of the new contacts we are adding</param>
        /// <param name="listInfo">Information about the lists id, recalculations on totals, consent etc (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPastedContactsAsyncWithHttpInfo (string contactEmails, string listInfo = null)
        {
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->AddPastedContacts");

            var localVarPath = "/contacts/paste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactEmails != null) localVarFormParams.Add("contactEmails", Configuration.ApiClient.ParameterToString(contactEmails)); // form parameter
            if (listInfo != null) localVarFormParams.Add("listInfo", Configuration.ApiClient.ParameterToString(listInfo)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPastedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Format CSV. Format a CSV file to an object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns></returns>
        public void CSVToObject (string file)
        {
             CSVToObjectWithHttpInfo(file);
        }

        /// <summary>
        /// Format CSV. Format a CSV file to an object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CSVToObjectWithHttpInfo (string file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ContactsApi->CSVToObject");

            var localVarPath = "/csv-to-object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSVToObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Format CSV. Format a CSV file to an object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CSVToObjectAsync (string file)
        {
             await CSVToObjectAsyncWithHttpInfo(file);

        }

        /// <summary>
        /// Format CSV. Format a CSV file to an object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file being uploaded</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CSVToObjectAsyncWithHttpInfo (string file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ContactsApi->CSVToObject");

            var localVarPath = "/csv-to-object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSVToObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Contacts Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns></returns>
        public void DeleteContacts (string listId = null, string contactIds = null)
        {
             DeleteContactsWithHttpInfo(listId, contactIds);
        }

        /// <summary>
        /// Delete Contacts Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsWithHttpInfo (string listId = null, string contactIds = null)
        {

            var localVarPath = "/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listId != null) localVarFormParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // form parameter
            if (contactIds != null) localVarFormParams.Add("contactIds", Configuration.ApiClient.ParameterToString(contactIds)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Contacts Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsAsync (string listId = null, string contactIds = null)
        {
             await DeleteContactsAsyncWithHttpInfo(listId, contactIds);

        }

        /// <summary>
        /// Delete Contacts Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">The list of contacts to be deleted. (optional)</param>
        /// <param name="contactIds">comma separated list of contact ids to delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsAsyncWithHttpInfo (string listId = null, string contactIds = null)
        {

            var localVarPath = "/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listId != null) localVarFormParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // form parameter
            if (contactIds != null) localVarFormParams.Add("contactIds", Configuration.ApiClient.ParameterToString(contactIds)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Contact Details Get the contact details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns></returns>
        public void GetContactById (string id)
        {
             GetContactByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Get Contact Details Get the contact details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContactByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->GetContactById");

            var localVarPath = "/contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Contact Details Get the contact details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContactByIdAsync (string id)
        {
             await GetContactByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Get Contact Details Get the contact details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Guid for the contact.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContactByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->GetContactById");

            var localVarPath = "/contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get custom fields. Get the current users custom fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetCustomFields ()
        {
             GetCustomFieldsWithHttpInfo();
        }

        /// <summary>
        /// Get custom fields. Get the current users custom fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCustomFieldsWithHttpInfo ()
        {

            var localVarPath = "/contacts/custom_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get custom fields. Get the current users custom fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCustomFieldsAsync ()
        {
             await GetCustomFieldsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Get custom fields. Get the current users custom fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomFieldsAsyncWithHttpInfo ()
        {

            var localVarPath = "/contacts/custom_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
