/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The HostedDoc class
    /// </summary>
    [DataContract]
    public partial class HostedDoc :  IEquatable<HostedDoc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostedDoc" /> class.
        /// </summary>
        /// <param name="Id">The doc&#39;s id..</param>
        /// <param name="UserId">The doc&#39;s owner..</param>
        /// <param name="FileName">docs file name..</param>
        /// <param name="ShortUrl">The doc&#39;s short url..</param>
        /// <param name="LongUrl">The doc&#39;s long url..</param>
        /// <param name="UploadDate">The doc&#39;s upload date..</param>
        public HostedDoc(string Id = default(string), string UserId = default(string), string FileName = default(string), string ShortUrl = default(string), string LongUrl = default(string), DateTime? UploadDate = default(DateTime?))
        {
            this.Id = Id;
            this.UserId = UserId;
            this.FileName = FileName;
            this.ShortUrl = ShortUrl;
            this.LongUrl = LongUrl;
            this.UploadDate = UploadDate;
        }
        
        /// <summary>
        /// The doc&#39;s id.
        /// </summary>
        /// <value>The doc&#39;s id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The doc&#39;s owner.
        /// </summary>
        /// <value>The doc&#39;s owner.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// docs file name.
        /// </summary>
        /// <value>docs file name.</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// The doc&#39;s short url.
        /// </summary>
        /// <value>The doc&#39;s short url.</value>
        [DataMember(Name="shortUrl", EmitDefaultValue=false)]
        public string ShortUrl { get; set; }

        /// <summary>
        /// The doc&#39;s long url.
        /// </summary>
        /// <value>The doc&#39;s long url.</value>
        [DataMember(Name="longUrl", EmitDefaultValue=false)]
        public string LongUrl { get; set; }

        /// <summary>
        /// The doc&#39;s upload date.
        /// </summary>
        /// <value>The doc&#39;s upload date.</value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public DateTime? UploadDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostedDoc {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ShortUrl: ").Append(ShortUrl).Append("\n");
            sb.Append("  LongUrl: ").Append(LongUrl).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostedDoc);
        }

        /// <summary>
        /// Returns true if HostedDoc instances are equal
        /// </summary>
        /// <param name="input">Instance of HostedDoc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostedDoc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ShortUrl == input.ShortUrl ||
                    (this.ShortUrl != null &&
                    this.ShortUrl.Equals(input.ShortUrl))
                ) && 
                (
                    this.LongUrl == input.LongUrl ||
                    (this.LongUrl != null &&
                    this.LongUrl.Equals(input.LongUrl))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.ShortUrl != null)
                    hashCode = hashCode * 59 + this.ShortUrl.GetHashCode();
                if (this.LongUrl != null)
                    hashCode = hashCode * 59 + this.LongUrl.GetHashCode();
                if (this.UploadDate != null)
                    hashCode = hashCode * 59 + this.UploadDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
