/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns></returns>
        void GetSocialArticleProperties (string jerichoId, string emailId, string originatorId);

        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialArticlePropertiesWithHttpInfo (string jerichoId, string emailId, string originatorId);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns></returns>
        void GetSocialAutoShares (string clientGroupId);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialAutoSharesWithHttpInfo (string clientGroupId);
        /// <summary>
        /// Get permissions for social integration
        /// </summary>
        /// <remarks>
        /// Get permissions for social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns></returns>
        void GetSocialPermissions (string socialType);

        /// <summary>
        /// Get permissions for social integration
        /// </summary>
        /// <remarks>
        /// Get permissions for social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialPermissionsWithHttpInfo (string socialType);
        /// <summary>
        /// Gets the social state
        /// </summary>
        /// <remarks>
        /// Gets the social state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns></returns>
        void GetSocialStatus (string originatorId);

        /// <summary>
        /// Gets the social state
        /// </summary>
        /// <remarks>
        /// Gets the social state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSocialStatusWithHttpInfo (string originatorId);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns></returns>
        void UpdateSocialAutoShares (string autoShare, string clientGroupId);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSocialAutoSharesWithHttpInfo (string autoShare, string clientGroupId);
        /// <summary>
        /// Sets the users social message to what they typed in
        /// </summary>
        /// <remarks>
        /// Sets the users social message to what they typed in
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns></returns>
        void UpdateSocialMessage (string message, string originatorId);

        /// <summary>
        /// Sets the users social message to what they typed in
        /// </summary>
        /// <remarks>
        /// Sets the users social message to what they typed in
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSocialMessageWithHttpInfo (string message, string originatorId);
        /// <summary>
        /// Updates the social state for the object
        /// </summary>
        /// <remarks>
        /// Updates the social state for the object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns></returns>
        void UpdateSocialStatus (string state, string originatorId);

        /// <summary>
        /// Updates the social state for the object
        /// </summary>
        /// <remarks>
        /// Updates the social state for the object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSocialStatusWithHttpInfo (string state, string originatorId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialArticlePropertiesAsync (string jerichoId, string emailId, string originatorId);

        /// <summary>
        /// Gets the social email properties
        /// </summary>
        /// <remarks>
        /// Gets the social email properties
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialArticlePropertiesAsyncWithHttpInfo (string jerichoId, string emailId, string originatorId);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialAutoSharesAsync (string clientGroupId);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialAutoSharesAsyncWithHttpInfo (string clientGroupId);
        /// <summary>
        /// Get permissions for social integration
        /// </summary>
        /// <remarks>
        /// Get permissions for social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialPermissionsAsync (string socialType);

        /// <summary>
        /// Get permissions for social integration
        /// </summary>
        /// <remarks>
        /// Get permissions for social integration and has redirect for user to login
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialPermissionsAsyncWithHttpInfo (string socialType);
        /// <summary>
        /// Gets the social state
        /// </summary>
        /// <remarks>
        /// Gets the social state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSocialStatusAsync (string originatorId);

        /// <summary>
        /// Gets the social state
        /// </summary>
        /// <remarks>
        /// Gets the social state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialStatusAsyncWithHttpInfo (string originatorId);
        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSocialAutoSharesAsync (string autoShare, string clientGroupId);

        /// <summary>
        /// Gets the auto shares from the client group assoc id
        /// </summary>
        /// <remarks>
        /// Gets the auto shares from the client group assoc id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialAutoSharesAsyncWithHttpInfo (string autoShare, string clientGroupId);
        /// <summary>
        /// Sets the users social message to what they typed in
        /// </summary>
        /// <remarks>
        /// Sets the users social message to what they typed in
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSocialMessageAsync (string message, string originatorId);

        /// <summary>
        /// Sets the users social message to what they typed in
        /// </summary>
        /// <remarks>
        /// Sets the users social message to what they typed in
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialMessageAsyncWithHttpInfo (string message, string originatorId);
        /// <summary>
        /// Updates the social state for the object
        /// </summary>
        /// <remarks>
        /// Updates the social state for the object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSocialStatusAsync (string state, string originatorId);

        /// <summary>
        /// Updates the social state for the object
        /// </summary>
        /// <remarks>
        /// Updates the social state for the object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialStatusAsyncWithHttpInfo (string state, string originatorId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SocialsApi : ISocialsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns></returns>
        public void GetSocialArticleProperties (string jerichoId, string emailId, string originatorId)
        {
             GetSocialArticlePropertiesWithHttpInfo(jerichoId, emailId, originatorId);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialArticlePropertiesWithHttpInfo (string jerichoId, string emailId, string originatorId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->GetSocialArticleProperties");

            var localVarPath = "/socials/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarQueryParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // query parameter
            if (emailId != null) localVarQueryParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // query parameter
            if (originatorId != null) localVarQueryParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialArticleProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialArticlePropertiesAsync (string jerichoId, string emailId, string originatorId)
        {
             await GetSocialArticlePropertiesAsyncWithHttpInfo(jerichoId, emailId, originatorId);

        }

        /// <summary>
        /// Gets the social email properties Gets the social email properties
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">associated jericho Id</param>
        /// <param name="emailId">This is the email Id for the email url</param>
        /// <param name="originatorId">This is the originator Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialArticlePropertiesAsyncWithHttpInfo (string jerichoId, string emailId, string originatorId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling SocialsApi->GetSocialArticleProperties");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->GetSocialArticleProperties");

            var localVarPath = "/socials/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarQueryParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // query parameter
            if (emailId != null) localVarQueryParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // query parameter
            if (originatorId != null) localVarQueryParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialArticleProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns></returns>
        public void GetSocialAutoShares (string clientGroupId)
        {
             GetSocialAutoSharesWithHttpInfo(clientGroupId);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialAutoSharesWithHttpInfo (string clientGroupId)
        {
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->GetSocialAutoShares");

            var localVarPath = "/socials/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarQueryParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialAutoShares", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialAutoSharesAsync (string clientGroupId)
        {
             await GetSocialAutoSharesAsyncWithHttpInfo(clientGroupId);

        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialAutoSharesAsyncWithHttpInfo (string clientGroupId)
        {
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->GetSocialAutoShares");

            var localVarPath = "/socials/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientGroupId != null) localVarQueryParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialAutoShares", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get permissions for social integration Get permissions for social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns></returns>
        public void GetSocialPermissions (string socialType)
        {
             GetSocialPermissionsWithHttpInfo(socialType);
        }

        /// <summary>
        /// Get permissions for social integration Get permissions for social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialPermissionsWithHttpInfo (string socialType)
        {
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->GetSocialPermissions");

            var localVarPath = "/socials/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialType != null) localVarQueryParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get permissions for social integration Get permissions for social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialPermissionsAsync (string socialType)
        {
             await GetSocialPermissionsAsyncWithHttpInfo(socialType);

        }

        /// <summary>
        /// Get permissions for social integration Get permissions for social integration and has redirect for user to login
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="socialType">Type of social integration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialPermissionsAsyncWithHttpInfo (string socialType)
        {
            // verify the required parameter 'socialType' is set
            if (socialType == null)
                throw new ApiException(400, "Missing required parameter 'socialType' when calling SocialsApi->GetSocialPermissions");

            var localVarPath = "/socials/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (socialType != null) localVarQueryParams.Add("socialType", Configuration.ApiClient.ParameterToString(socialType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the social state Gets the social state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns></returns>
        public void GetSocialStatus (string originatorId)
        {
             GetSocialStatusWithHttpInfo(originatorId);
        }

        /// <summary>
        /// Gets the social state Gets the social state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSocialStatusWithHttpInfo (string originatorId)
        {
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->GetSocialStatus");

            var localVarPath = "/socials/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (originatorId != null) localVarQueryParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the social state Gets the social state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSocialStatusAsync (string originatorId)
        {
             await GetSocialStatusAsyncWithHttpInfo(originatorId);

        }

        /// <summary>
        /// Gets the social state Gets the social state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originatorId">associated originatorId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSocialStatusAsyncWithHttpInfo (string originatorId)
        {
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->GetSocialStatus");

            var localVarPath = "/socials/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (originatorId != null) localVarQueryParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns></returns>
        public void UpdateSocialAutoShares (string autoShare, string clientGroupId)
        {
             UpdateSocialAutoSharesWithHttpInfo(autoShare, clientGroupId);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSocialAutoSharesWithHttpInfo (string autoShare, string clientGroupId)
        {
            // verify the required parameter 'autoShare' is set
            if (autoShare == null)
                throw new ApiException(400, "Missing required parameter 'autoShare' when calling SocialsApi->UpdateSocialAutoShares");
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->UpdateSocialAutoShares");

            var localVarPath = "/socials/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoShare != null) localVarFormParams.Add("autoShare", Configuration.ApiClient.ParameterToString(autoShare)); // form parameter
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialAutoShares", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSocialAutoSharesAsync (string autoShare, string clientGroupId)
        {
             await UpdateSocialAutoSharesAsyncWithHttpInfo(autoShare, clientGroupId);

        }

        /// <summary>
        /// Gets the auto shares from the client group assoc id Gets the auto shares from the client group assoc id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoShare">The social share that will auto share to</param>
        /// <param name="clientGroupId">ID of the client group association</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialAutoSharesAsyncWithHttpInfo (string autoShare, string clientGroupId)
        {
            // verify the required parameter 'autoShare' is set
            if (autoShare == null)
                throw new ApiException(400, "Missing required parameter 'autoShare' when calling SocialsApi->UpdateSocialAutoShares");
            // verify the required parameter 'clientGroupId' is set
            if (clientGroupId == null)
                throw new ApiException(400, "Missing required parameter 'clientGroupId' when calling SocialsApi->UpdateSocialAutoShares");

            var localVarPath = "/socials/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoShare != null) localVarFormParams.Add("autoShare", Configuration.ApiClient.ParameterToString(autoShare)); // form parameter
            if (clientGroupId != null) localVarFormParams.Add("clientGroupId", Configuration.ApiClient.ParameterToString(clientGroupId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialAutoShares", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the users social message to what they typed in Sets the users social message to what they typed in
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns></returns>
        public void UpdateSocialMessage (string message, string originatorId)
        {
             UpdateSocialMessageWithHttpInfo(message, originatorId);
        }

        /// <summary>
        /// Sets the users social message to what they typed in Sets the users social message to what they typed in
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSocialMessageWithHttpInfo (string message, string originatorId)
        {
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling SocialsApi->UpdateSocialMessage");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->UpdateSocialMessage");

            var localVarPath = "/socials/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (originatorId != null) localVarFormParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the users social message to what they typed in Sets the users social message to what they typed in
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSocialMessageAsync (string message, string originatorId)
        {
             await UpdateSocialMessageAsyncWithHttpInfo(message, originatorId);

        }

        /// <summary>
        /// Sets the users social message to what they typed in Sets the users social message to what they typed in
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">The social message the user typed in</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialMessageAsyncWithHttpInfo (string message, string originatorId)
        {
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling SocialsApi->UpdateSocialMessage");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->UpdateSocialMessage");

            var localVarPath = "/socials/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (originatorId != null) localVarFormParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the social state for the object Updates the social state for the object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns></returns>
        public void UpdateSocialStatus (string state, string originatorId)
        {
             UpdateSocialStatusWithHttpInfo(state, originatorId);
        }

        /// <summary>
        /// Updates the social state for the object Updates the social state for the object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSocialStatusWithHttpInfo (string state, string originatorId)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling SocialsApi->UpdateSocialStatus");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->UpdateSocialStatus");

            var localVarPath = "/socials/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (originatorId != null) localVarFormParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the social state for the object Updates the social state for the object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSocialStatusAsync (string state, string originatorId)
        {
             await UpdateSocialStatusAsyncWithHttpInfo(state, originatorId);

        }

        /// <summary>
        /// Updates the social state for the object Updates the social state for the object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state to set to</param>
        /// <param name="originatorId">The parent id tied to the social share</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSocialStatusAsyncWithHttpInfo (string state, string originatorId)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling SocialsApi->UpdateSocialStatus");
            // verify the required parameter 'originatorId' is set
            if (originatorId == null)
                throw new ApiException(400, "Missing required parameter 'originatorId' when calling SocialsApi->UpdateSocialStatus");

            var localVarPath = "/socials/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (originatorId != null) localVarFormParams.Add("originatorId", Configuration.ApiClient.ParameterToString(originatorId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSocialStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
