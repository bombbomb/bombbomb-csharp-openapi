/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate an integration for a user.
        /// </summary>
        /// <remarks>
        /// Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns></returns>
        void ConnectIntegration (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null);

        /// <summary>
        /// Activate an integration for a user.
        /// </summary>
        /// <remarks>
        /// Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectIntegrationWithHttpInfo (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null);
        /// <summary>
        /// Remove an integration for a user.
        /// </summary>
        /// <remarks>
        /// Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns></returns>
        void DeleteIntegration (string id = null, string code = null);

        /// <summary>
        /// Remove an integration for a user.
        /// </summary>
        /// <remarks>
        /// Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIntegrationWithHttpInfo (string id = null, string code = null);
        /// <summary>
        /// Get health for a given integration
        /// </summary>
        /// <remarks>
        /// Get health for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns></returns>
        void GetIntegrationHealth (string code);

        /// <summary>
        /// Get health for a given integration
        /// </summary>
        /// <remarks>
        /// Get health for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIntegrationHealthWithHttpInfo (string code);
        /// <summary>
        /// Get page components for a given integration
        /// </summary>
        /// <remarks>
        /// Get all page components for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns></returns>
        void GetIntegrationPageComponents (string integrationName);

        /// <summary>
        /// Get page components for a given integration
        /// </summary>
        /// <remarks>
        /// Get all page components for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIntegrationPageComponentsWithHttpInfo (string integrationName);
        /// <summary>
        /// Synchronize your integration list or lists.
        /// </summary>
        /// <remarks>
        /// Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>string</returns>
        string SyncUsersIntegratedLists (string integrationId = null);

        /// <summary>
        /// Synchronize your integration list or lists.
        /// </summary>
        /// <remarks>
        /// Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SyncUsersIntegratedListsWithHttpInfo (string integrationId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate an integration for a user.
        /// </summary>
        /// <remarks>
        /// Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectIntegrationAsync (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null);

        /// <summary>
        /// Activate an integration for a user.
        /// </summary>
        /// <remarks>
        /// Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectIntegrationAsyncWithHttpInfo (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null);
        /// <summary>
        /// Remove an integration for a user.
        /// </summary>
        /// <remarks>
        /// Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIntegrationAsync (string id = null, string code = null);

        /// <summary>
        /// Remove an integration for a user.
        /// </summary>
        /// <remarks>
        /// Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIntegrationAsyncWithHttpInfo (string id = null, string code = null);
        /// <summary>
        /// Get health for a given integration
        /// </summary>
        /// <remarks>
        /// Get health for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetIntegrationHealthAsync (string code);

        /// <summary>
        /// Get health for a given integration
        /// </summary>
        /// <remarks>
        /// Get health for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIntegrationHealthAsyncWithHttpInfo (string code);
        /// <summary>
        /// Get page components for a given integration
        /// </summary>
        /// <remarks>
        /// Get all page components for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetIntegrationPageComponentsAsync (string integrationName);

        /// <summary>
        /// Get page components for a given integration
        /// </summary>
        /// <remarks>
        /// Get all page components for an integration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIntegrationPageComponentsAsyncWithHttpInfo (string integrationName);
        /// <summary>
        /// Synchronize your integration list or lists.
        /// </summary>
        /// <remarks>
        /// Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SyncUsersIntegratedListsAsync (string integrationId = null);

        /// <summary>
        /// Synchronize your integration list or lists.
        /// </summary>
        /// <remarks>
        /// Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SyncUsersIntegratedListsAsyncWithHttpInfo (string integrationId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationsApi : IIntegrationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate an integration for a user. Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns></returns>
        public void ConnectIntegration (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null)
        {
             ConnectIntegrationWithHttpInfo(code, key, secret, token, data, overwrite);
        }

        /// <summary>
        /// Activate an integration for a user. Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectIntegrationWithHttpInfo (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling IntegrationsApi->ConnectIntegration");

            var localVarPath = "/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (key != null) localVarFormParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // form parameter
            if (secret != null) localVarFormParams.Add("secret", Configuration.ApiClient.ParameterToString(secret)); // form parameter
            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (overwrite != null) localVarFormParams.Add("overwrite", Configuration.ApiClient.ParameterToString(overwrite)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate an integration for a user. Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectIntegrationAsync (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null)
        {
             await ConnectIntegrationAsyncWithHttpInfo(code, key, secret, token, data, overwrite);

        }

        /// <summary>
        /// Activate an integration for a user. Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The identifier of the integration.</param>
        /// <param name="key">The key value. (optional)</param>
        /// <param name="secret">The secret value. (optional)</param>
        /// <param name="token">The token value. (optional)</param>
        /// <param name="data">The data value as JSON. (optional)</param>
        /// <param name="overwrite">Boolean value to know whether or not to delete the integration if it already exists (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectIntegrationAsyncWithHttpInfo (string code, string key = null, string secret = null, string token = null, string data = null, string overwrite = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling IntegrationsApi->ConnectIntegration");

            var localVarPath = "/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (key != null) localVarFormParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // form parameter
            if (secret != null) localVarFormParams.Add("secret", Configuration.ApiClient.ParameterToString(secret)); // form parameter
            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (overwrite != null) localVarFormParams.Add("overwrite", Configuration.ApiClient.ParameterToString(overwrite)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an integration for a user. Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns></returns>
        public void DeleteIntegration (string id = null, string code = null)
        {
             DeleteIntegrationWithHttpInfo(id, code);
        }

        /// <summary>
        /// Remove an integration for a user. Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIntegrationWithHttpInfo (string id = null, string code = null)
        {

            var localVarPath = "/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an integration for a user. Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIntegrationAsync (string id = null, string code = null)
        {
             await DeleteIntegrationAsyncWithHttpInfo(id, code);

        }

        /// <summary>
        /// Remove an integration for a user. Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Integration ID (optional)</param>
        /// <param name="code">Integration Code (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIntegrationAsyncWithHttpInfo (string id = null, string code = null)
        {

            var localVarPath = "/integrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (code != null) localVarFormParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get health for a given integration Get health for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns></returns>
        public void GetIntegrationHealth (string code)
        {
             GetIntegrationHealthWithHttpInfo(code);
        }

        /// <summary>
        /// Get health for a given integration Get health for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetIntegrationHealthWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling IntegrationsApi->GetIntegrationHealth");

            var localVarPath = "/integrations/health/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get health for a given integration Get health for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetIntegrationHealthAsync (string code)
        {
             await GetIntegrationHealthAsyncWithHttpInfo(code);

        }

        /// <summary>
        /// Get health for a given integration Get health for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The integration code for which to retrieve the information from</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIntegrationHealthAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling IntegrationsApi->GetIntegrationHealth");

            var localVarPath = "/integrations/health/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get page components for a given integration Get all page components for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns></returns>
        public void GetIntegrationPageComponents (string integrationName)
        {
             GetIntegrationPageComponentsWithHttpInfo(integrationName);
        }

        /// <summary>
        /// Get page components for a given integration Get all page components for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetIntegrationPageComponentsWithHttpInfo (string integrationName)
        {
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling IntegrationsApi->GetIntegrationPageComponents");

            var localVarPath = "/integrations/pageComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_name", integrationName)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationPageComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get page components for a given integration Get all page components for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetIntegrationPageComponentsAsync (string integrationName)
        {
             await GetIntegrationPageComponentsAsyncWithHttpInfo(integrationName);

        }

        /// <summary>
        /// Get page components for a given integration Get all page components for an integration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName">The integration for which to retrieve HTML page components.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIntegrationPageComponentsAsyncWithHttpInfo (string integrationName)
        {
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling IntegrationsApi->GetIntegrationPageComponents");

            var localVarPath = "/integrations/pageComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_name", integrationName)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationPageComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Synchronize your integration list or lists. Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>string</returns>
        public string SyncUsersIntegratedLists (string integrationId = null)
        {
             ApiResponse<string> localVarResponse = SyncUsersIntegratedListsWithHttpInfo(integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Synchronize your integration list or lists. Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SyncUsersIntegratedListsWithHttpInfo (string integrationId = null)
        {

            var localVarPath = "/integrations/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_id", integrationId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUsersIntegratedLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Synchronize your integration list or lists. Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SyncUsersIntegratedListsAsync (string integrationId = null)
        {
             ApiResponse<string> localVarResponse = await SyncUsersIntegratedListsAsyncWithHttpInfo(integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Synchronize your integration list or lists. Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">The integration to sync lists for. All integrations will sync if nothing is provided. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SyncUsersIntegratedListsAsyncWithHttpInfo (string integrationId = null)
        {

            var localVarPath = "/integrations/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_id", integrationId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUsersIntegratedLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
