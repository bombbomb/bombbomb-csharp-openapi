/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The HostedDoc class
    /// </summary>
    [DataContract]
    public partial class HostedDoc :  IEquatable<HostedDoc>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostedDoc" /> class.
        /// </summary>
        /// <param name="Id">The doc&#39;s id..</param>
        /// <param name="UserId">The doc&#39;s owner..</param>
        /// <param name="FileName">docs file name..</param>
        /// <param name="ShortUrl">The doc&#39;s short url..</param>
        /// <param name="LongUrl">The doc&#39;s long url..</param>
        /// <param name="UploadDate">The doc&#39;s upload date..</param>
        public HostedDoc(string Id = null, string UserId = null, string FileName = null, string ShortUrl = null, string LongUrl = null, DateTime? UploadDate = null)
        {
            this.Id = Id;
            this.UserId = UserId;
            this.FileName = FileName;
            this.ShortUrl = ShortUrl;
            this.LongUrl = LongUrl;
            this.UploadDate = UploadDate;
        }
        
        /// <summary>
        /// The doc&#39;s id.
        /// </summary>
        /// <value>The doc&#39;s id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The doc&#39;s owner.
        /// </summary>
        /// <value>The doc&#39;s owner.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// docs file name.
        /// </summary>
        /// <value>docs file name.</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }
        /// <summary>
        /// The doc&#39;s short url.
        /// </summary>
        /// <value>The doc&#39;s short url.</value>
        [DataMember(Name="shortUrl", EmitDefaultValue=false)]
        public string ShortUrl { get; set; }
        /// <summary>
        /// The doc&#39;s long url.
        /// </summary>
        /// <value>The doc&#39;s long url.</value>
        [DataMember(Name="longUrl", EmitDefaultValue=false)]
        public string LongUrl { get; set; }
        /// <summary>
        /// The doc&#39;s upload date.
        /// </summary>
        /// <value>The doc&#39;s upload date.</value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public DateTime? UploadDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostedDoc {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ShortUrl: ").Append(ShortUrl).Append("\n");
            sb.Append("  LongUrl: ").Append(LongUrl).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HostedDoc);
        }

        /// <summary>
        /// Returns true if HostedDoc instances are equal
        /// </summary>
        /// <param name="other">Instance of HostedDoc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostedDoc other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.ShortUrl == other.ShortUrl ||
                    this.ShortUrl != null &&
                    this.ShortUrl.Equals(other.ShortUrl)
                ) && 
                (
                    this.LongUrl == other.LongUrl ||
                    this.LongUrl != null &&
                    this.LongUrl.Equals(other.LongUrl)
                ) && 
                (
                    this.UploadDate == other.UploadDate ||
                    this.UploadDate != null &&
                    this.UploadDate.Equals(other.UploadDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.ShortUrl != null)
                    hash = hash * 59 + this.ShortUrl.GetHashCode();
                if (this.LongUrl != null)
                    hash = hash * 59 + this.LongUrl.GetHashCode();
                if (this.UploadDate != null)
                    hash = hash * 59 + this.UploadDate.GetHashCode();
                return hash;
            }
        }
    }

}
