/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// JerichoConfiguration
    /// </summary>
    [DataContract]
    public partial class JerichoConfiguration :  IEquatable<JerichoConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JerichoConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JerichoConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JerichoConfiguration" /> class.
        /// </summary>
        /// <param name="SendDate">When the email should be sent..</param>
        /// <param name="IsPrompt">Video Prompt: Determines whether this is a static or prompted send. (required).</param>
        /// <param name="PrintToTemplate">Controls whether or not the content is printed into a template..</param>
        /// <param name="EmailId">Static send: The Email to send on behalf of the group members..</param>
        /// <param name="ExampleVideoId">Video Prompt: The Video to include as an example for prompted users..</param>
        /// <param name="FollowUpVideoId">The Video to include in the tracking follow up..</param>
        /// <param name="PromptIntro">Video Prompt: The intro text directed toward prompted users..</param>
        /// <param name="PromptSubject">Video Prompt: The subject line prompting the user to record a video..</param>
        /// <param name="PromptBody">Video Prompt: The HTML body of the email prompting the user to record a video..</param>
        /// <param name="EmailSubject">Video Prompt: The subject line of the final sent email.</param>
        /// <param name="EmailBody">Video Prompt: The HTML body of the final sent email..</param>
        /// <param name="SendWithoutVideo">Video Prompt: Whether to send the final email if no video was recorded..</param>
        /// <param name="MediaType">The type of media used for a social send.</param>
        /// <param name="CustomInitialEmailSubjectLine">The custom subject line for the prompt initial email.</param>
        public JerichoConfiguration(DateTime? SendDate = default(DateTime?), bool? IsPrompt = default(bool?), bool? PrintToTemplate = default(bool?), string EmailId = default(string), string ExampleVideoId = default(string), string FollowUpVideoId = default(string), string PromptIntro = default(string), string PromptSubject = default(string), string PromptBody = default(string), string EmailSubject = default(string), string EmailBody = default(string), bool? SendWithoutVideo = default(bool?), string MediaType = default(string), string CustomInitialEmailSubjectLine = default(string))
        {
            // to ensure "IsPrompt" is required (not null)
            if (IsPrompt == null)
            {
                throw new InvalidDataException("IsPrompt is a required property for JerichoConfiguration and cannot be null");
            }
            else
            {
                this.IsPrompt = IsPrompt;
            }
            this.SendDate = SendDate;
            this.PrintToTemplate = PrintToTemplate;
            this.EmailId = EmailId;
            this.ExampleVideoId = ExampleVideoId;
            this.FollowUpVideoId = FollowUpVideoId;
            this.PromptIntro = PromptIntro;
            this.PromptSubject = PromptSubject;
            this.PromptBody = PromptBody;
            this.EmailSubject = EmailSubject;
            this.EmailBody = EmailBody;
            this.SendWithoutVideo = SendWithoutVideo;
            this.MediaType = MediaType;
            this.CustomInitialEmailSubjectLine = CustomInitialEmailSubjectLine;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets ClientGroupId
        /// </summary>
        [DataMember(Name="clientGroupId", EmitDefaultValue=false)]
        public string ClientGroupId { get; private set; }

        /// <summary>
        /// When the email should be sent.
        /// </summary>
        /// <value>When the email should be sent.</value>
        [DataMember(Name="sendDate", EmitDefaultValue=false)]
        public DateTime? SendDate { get; set; }

        /// <summary>
        /// Video Prompt: Determines whether this is a static or prompted send.
        /// </summary>
        /// <value>Video Prompt: Determines whether this is a static or prompted send.</value>
        [DataMember(Name="isPrompt", EmitDefaultValue=false)]
        public bool? IsPrompt { get; set; }

        /// <summary>
        /// Controls whether or not the content is printed into a template.
        /// </summary>
        /// <value>Controls whether or not the content is printed into a template.</value>
        [DataMember(Name="printToTemplate", EmitDefaultValue=false)]
        public bool? PrintToTemplate { get; set; }

        /// <summary>
        /// Static send: The Email to send on behalf of the group members.
        /// </summary>
        /// <value>Static send: The Email to send on behalf of the group members.</value>
        [DataMember(Name="emailId", EmitDefaultValue=false)]
        public string EmailId { get; set; }

        /// <summary>
        /// Video Prompt: The Video to include as an example for prompted users.
        /// </summary>
        /// <value>Video Prompt: The Video to include as an example for prompted users.</value>
        [DataMember(Name="exampleVideoId", EmitDefaultValue=false)]
        public string ExampleVideoId { get; set; }

        /// <summary>
        /// The Video to include in the tracking follow up.
        /// </summary>
        /// <value>The Video to include in the tracking follow up.</value>
        [DataMember(Name="followUpVideoId", EmitDefaultValue=false)]
        public string FollowUpVideoId { get; set; }

        /// <summary>
        /// Video Prompt: The intro text directed toward prompted users.
        /// </summary>
        /// <value>Video Prompt: The intro text directed toward prompted users.</value>
        [DataMember(Name="promptIntro", EmitDefaultValue=false)]
        public string PromptIntro { get; set; }

        /// <summary>
        /// Video Prompt: The subject line prompting the user to record a video.
        /// </summary>
        /// <value>Video Prompt: The subject line prompting the user to record a video.</value>
        [DataMember(Name="promptSubject", EmitDefaultValue=false)]
        public string PromptSubject { get; set; }

        /// <summary>
        /// Video Prompt: The HTML body of the email prompting the user to record a video.
        /// </summary>
        /// <value>Video Prompt: The HTML body of the email prompting the user to record a video.</value>
        [DataMember(Name="promptBody", EmitDefaultValue=false)]
        public string PromptBody { get; set; }

        /// <summary>
        /// Video Prompt: The subject line of the final sent email
        /// </summary>
        /// <value>Video Prompt: The subject line of the final sent email</value>
        [DataMember(Name="emailSubject", EmitDefaultValue=false)]
        public string EmailSubject { get; set; }

        /// <summary>
        /// Video Prompt: The HTML body of the final sent email.
        /// </summary>
        /// <value>Video Prompt: The HTML body of the final sent email.</value>
        [DataMember(Name="emailBody", EmitDefaultValue=false)]
        public string EmailBody { get; set; }

        /// <summary>
        /// Video Prompt: Whether to send the final email if no video was recorded.
        /// </summary>
        /// <value>Video Prompt: Whether to send the final email if no video was recorded.</value>
        [DataMember(Name="sendWithoutVideo", EmitDefaultValue=false)]
        public bool? SendWithoutVideo { get; set; }

        /// <summary>
        /// The state of the send.
        /// </summary>
        /// <value>The state of the send.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// The type of media used for a social send
        /// </summary>
        /// <value>The type of media used for a social send</value>
        [DataMember(Name="mediaType", EmitDefaultValue=false)]
        public string MediaType { get; set; }

        /// <summary>
        /// The custom subject line for the prompt initial email
        /// </summary>
        /// <value>The custom subject line for the prompt initial email</value>
        [DataMember(Name="customInitialEmailSubjectLine", EmitDefaultValue=false)]
        public string CustomInitialEmailSubjectLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JerichoConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientGroupId: ").Append(ClientGroupId).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  IsPrompt: ").Append(IsPrompt).Append("\n");
            sb.Append("  PrintToTemplate: ").Append(PrintToTemplate).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  ExampleVideoId: ").Append(ExampleVideoId).Append("\n");
            sb.Append("  FollowUpVideoId: ").Append(FollowUpVideoId).Append("\n");
            sb.Append("  PromptIntro: ").Append(PromptIntro).Append("\n");
            sb.Append("  PromptSubject: ").Append(PromptSubject).Append("\n");
            sb.Append("  PromptBody: ").Append(PromptBody).Append("\n");
            sb.Append("  EmailSubject: ").Append(EmailSubject).Append("\n");
            sb.Append("  EmailBody: ").Append(EmailBody).Append("\n");
            sb.Append("  SendWithoutVideo: ").Append(SendWithoutVideo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  CustomInitialEmailSubjectLine: ").Append(CustomInitialEmailSubjectLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JerichoConfiguration);
        }

        /// <summary>
        /// Returns true if JerichoConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of JerichoConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JerichoConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ClientGroupId == input.ClientGroupId ||
                    (this.ClientGroupId != null &&
                    this.ClientGroupId.Equals(input.ClientGroupId))
                ) && 
                (
                    this.SendDate == input.SendDate ||
                    (this.SendDate != null &&
                    this.SendDate.Equals(input.SendDate))
                ) && 
                (
                    this.IsPrompt == input.IsPrompt ||
                    (this.IsPrompt != null &&
                    this.IsPrompt.Equals(input.IsPrompt))
                ) && 
                (
                    this.PrintToTemplate == input.PrintToTemplate ||
                    (this.PrintToTemplate != null &&
                    this.PrintToTemplate.Equals(input.PrintToTemplate))
                ) && 
                (
                    this.EmailId == input.EmailId ||
                    (this.EmailId != null &&
                    this.EmailId.Equals(input.EmailId))
                ) && 
                (
                    this.ExampleVideoId == input.ExampleVideoId ||
                    (this.ExampleVideoId != null &&
                    this.ExampleVideoId.Equals(input.ExampleVideoId))
                ) && 
                (
                    this.FollowUpVideoId == input.FollowUpVideoId ||
                    (this.FollowUpVideoId != null &&
                    this.FollowUpVideoId.Equals(input.FollowUpVideoId))
                ) && 
                (
                    this.PromptIntro == input.PromptIntro ||
                    (this.PromptIntro != null &&
                    this.PromptIntro.Equals(input.PromptIntro))
                ) && 
                (
                    this.PromptSubject == input.PromptSubject ||
                    (this.PromptSubject != null &&
                    this.PromptSubject.Equals(input.PromptSubject))
                ) && 
                (
                    this.PromptBody == input.PromptBody ||
                    (this.PromptBody != null &&
                    this.PromptBody.Equals(input.PromptBody))
                ) && 
                (
                    this.EmailSubject == input.EmailSubject ||
                    (this.EmailSubject != null &&
                    this.EmailSubject.Equals(input.EmailSubject))
                ) && 
                (
                    this.EmailBody == input.EmailBody ||
                    (this.EmailBody != null &&
                    this.EmailBody.Equals(input.EmailBody))
                ) && 
                (
                    this.SendWithoutVideo == input.SendWithoutVideo ||
                    (this.SendWithoutVideo != null &&
                    this.SendWithoutVideo.Equals(input.SendWithoutVideo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) && 
                (
                    this.CustomInitialEmailSubjectLine == input.CustomInitialEmailSubjectLine ||
                    (this.CustomInitialEmailSubjectLine != null &&
                    this.CustomInitialEmailSubjectLine.Equals(input.CustomInitialEmailSubjectLine))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ClientGroupId != null)
                    hashCode = hashCode * 59 + this.ClientGroupId.GetHashCode();
                if (this.SendDate != null)
                    hashCode = hashCode * 59 + this.SendDate.GetHashCode();
                if (this.IsPrompt != null)
                    hashCode = hashCode * 59 + this.IsPrompt.GetHashCode();
                if (this.PrintToTemplate != null)
                    hashCode = hashCode * 59 + this.PrintToTemplate.GetHashCode();
                if (this.EmailId != null)
                    hashCode = hashCode * 59 + this.EmailId.GetHashCode();
                if (this.ExampleVideoId != null)
                    hashCode = hashCode * 59 + this.ExampleVideoId.GetHashCode();
                if (this.FollowUpVideoId != null)
                    hashCode = hashCode * 59 + this.FollowUpVideoId.GetHashCode();
                if (this.PromptIntro != null)
                    hashCode = hashCode * 59 + this.PromptIntro.GetHashCode();
                if (this.PromptSubject != null)
                    hashCode = hashCode * 59 + this.PromptSubject.GetHashCode();
                if (this.PromptBody != null)
                    hashCode = hashCode * 59 + this.PromptBody.GetHashCode();
                if (this.EmailSubject != null)
                    hashCode = hashCode * 59 + this.EmailSubject.GetHashCode();
                if (this.EmailBody != null)
                    hashCode = hashCode * 59 + this.EmailBody.GetHashCode();
                if (this.SendWithoutVideo != null)
                    hashCode = hashCode * 59 + this.SendWithoutVideo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.CustomInitialEmailSubjectLine != null)
                    hashCode = hashCode * 59 + this.CustomInitialEmailSubjectLine.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
