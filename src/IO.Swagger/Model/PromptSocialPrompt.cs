/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Prompt\\SocialPrompt class
    /// </summary>
    [DataContract]
    public partial class PromptSocialPrompt :  IEquatable<PromptSocialPrompt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromptSocialPrompt" /> class.
        /// </summary>
        /// <param name="JerichoId">If sent in a jericho context, this will have the jericho id.</param>
        /// <param name="PromptSubject">The prompt&#39;s subject line.</param>
        /// <param name="PromptHtml">The suggested script of the prompt..</param>
        /// <param name="ScheduledSendDate">When the final email is scheduled to be sent.</param>
        /// <param name="ClientGroupId">The client group campaign that created the prompt..</param>
        /// <param name="ThumbnailUrl">The URL of a thumbnail image for this prompt.</param>
        /// <param name="CreatedDate">When the email was first sent out.</param>
        /// <param name="LastNotified">When the user was last notified about a prompt email waiting for a video.</param>
        /// <param name="SendMechanism">The sendMechanism property.</param>
        /// <param name="SendTypes">The types of mechanisms this prompt can send..</param>
        public PromptSocialPrompt(string JerichoId = default(string), string PromptSubject = default(string), string PromptHtml = default(string), DateTime? ScheduledSendDate = default(DateTime?), string ClientGroupId = default(string), string ThumbnailUrl = default(string), DateTime? CreatedDate = default(DateTime?), DateTime? LastNotified = default(DateTime?), DateTime? SendMechanism = default(DateTime?), List<string> SendTypes = default(List<string>))
        {
            this.JerichoId = JerichoId;
            this.PromptSubject = PromptSubject;
            this.PromptHtml = PromptHtml;
            this.ScheduledSendDate = ScheduledSendDate;
            this.ClientGroupId = ClientGroupId;
            this.ThumbnailUrl = ThumbnailUrl;
            this.CreatedDate = CreatedDate;
            this.LastNotified = LastNotified;
            this.SendMechanism = SendMechanism;
            this.SendTypes = SendTypes;
        }
        
        /// <summary>
        /// The identifier of the prompt. Read Only.
        /// </summary>
        /// <value>The identifier of the prompt. Read Only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The prompt&#39;s owner. Read Only.
        /// </summary>
        /// <value>The prompt&#39;s owner. Read Only.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; private set; }

        /// <summary>
        /// If sent in a jericho context, this will have the jericho id
        /// </summary>
        /// <value>If sent in a jericho context, this will have the jericho id</value>
        [DataMember(Name="jerichoId", EmitDefaultValue=false)]
        public string JerichoId { get; set; }

        /// <summary>
        /// The prompt&#39;s subject line
        /// </summary>
        /// <value>The prompt&#39;s subject line</value>
        [DataMember(Name="promptSubject", EmitDefaultValue=false)]
        public string PromptSubject { get; set; }

        /// <summary>
        /// The suggested script of the prompt.
        /// </summary>
        /// <value>The suggested script of the prompt.</value>
        [DataMember(Name="promptHtml", EmitDefaultValue=false)]
        public string PromptHtml { get; set; }

        /// <summary>
        /// When the final email is scheduled to be sent
        /// </summary>
        /// <value>When the final email is scheduled to be sent</value>
        [DataMember(Name="scheduledSendDate", EmitDefaultValue=false)]
        public DateTime? ScheduledSendDate { get; set; }

        /// <summary>
        /// The client group campaign that created the prompt.
        /// </summary>
        /// <value>The client group campaign that created the prompt.</value>
        [DataMember(Name="clientGroupId", EmitDefaultValue=false)]
        public string ClientGroupId { get; set; }

        /// <summary>
        /// The URL of a thumbnail image for this prompt
        /// </summary>
        /// <value>The URL of a thumbnail image for this prompt</value>
        [DataMember(Name="thumbnailUrl", EmitDefaultValue=false)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// The status of the prompt: created &#x3D; 0, sent &#x3D; 10, recorded &#x3D; 20, job_created &#x3D; 30, timed_out &#x3D; 40, declined &#x3D; 50 Read Only
        /// </summary>
        /// <value>The status of the prompt: created &#x3D; 0, sent &#x3D; 10, recorded &#x3D; 20, job_created &#x3D; 30, timed_out &#x3D; 40, declined &#x3D; 50 Read Only</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; private set; }

        /// <summary>
        /// When the email was first sent out
        /// </summary>
        /// <value>When the email was first sent out</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// When the user was last notified about a prompt email waiting for a video
        /// </summary>
        /// <value>When the user was last notified about a prompt email waiting for a video</value>
        [DataMember(Name="lastNotified", EmitDefaultValue=false)]
        public DateTime? LastNotified { get; set; }

        /// <summary>
        /// The sendMechanism property
        /// </summary>
        /// <value>The sendMechanism property</value>
        [DataMember(Name="sendMechanism", EmitDefaultValue=false)]
        public DateTime? SendMechanism { get; set; }

        /// <summary>
        /// The types of mechanisms this prompt can send.
        /// </summary>
        /// <value>The types of mechanisms this prompt can send.</value>
        [DataMember(Name="sendTypes", EmitDefaultValue=false)]
        public List<string> SendTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromptSocialPrompt {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  JerichoId: ").Append(JerichoId).Append("\n");
            sb.Append("  PromptSubject: ").Append(PromptSubject).Append("\n");
            sb.Append("  PromptHtml: ").Append(PromptHtml).Append("\n");
            sb.Append("  ScheduledSendDate: ").Append(ScheduledSendDate).Append("\n");
            sb.Append("  ClientGroupId: ").Append(ClientGroupId).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastNotified: ").Append(LastNotified).Append("\n");
            sb.Append("  SendMechanism: ").Append(SendMechanism).Append("\n");
            sb.Append("  SendTypes: ").Append(SendTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromptSocialPrompt);
        }

        /// <summary>
        /// Returns true if PromptSocialPrompt instances are equal
        /// </summary>
        /// <param name="input">Instance of PromptSocialPrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromptSocialPrompt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.JerichoId == input.JerichoId ||
                    (this.JerichoId != null &&
                    this.JerichoId.Equals(input.JerichoId))
                ) && 
                (
                    this.PromptSubject == input.PromptSubject ||
                    (this.PromptSubject != null &&
                    this.PromptSubject.Equals(input.PromptSubject))
                ) && 
                (
                    this.PromptHtml == input.PromptHtml ||
                    (this.PromptHtml != null &&
                    this.PromptHtml.Equals(input.PromptHtml))
                ) && 
                (
                    this.ScheduledSendDate == input.ScheduledSendDate ||
                    (this.ScheduledSendDate != null &&
                    this.ScheduledSendDate.Equals(input.ScheduledSendDate))
                ) && 
                (
                    this.ClientGroupId == input.ClientGroupId ||
                    (this.ClientGroupId != null &&
                    this.ClientGroupId.Equals(input.ClientGroupId))
                ) && 
                (
                    this.ThumbnailUrl == input.ThumbnailUrl ||
                    (this.ThumbnailUrl != null &&
                    this.ThumbnailUrl.Equals(input.ThumbnailUrl))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.LastNotified == input.LastNotified ||
                    (this.LastNotified != null &&
                    this.LastNotified.Equals(input.LastNotified))
                ) && 
                (
                    this.SendMechanism == input.SendMechanism ||
                    (this.SendMechanism != null &&
                    this.SendMechanism.Equals(input.SendMechanism))
                ) && 
                (
                    this.SendTypes == input.SendTypes ||
                    this.SendTypes != null &&
                    this.SendTypes.SequenceEqual(input.SendTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.JerichoId != null)
                    hashCode = hashCode * 59 + this.JerichoId.GetHashCode();
                if (this.PromptSubject != null)
                    hashCode = hashCode * 59 + this.PromptSubject.GetHashCode();
                if (this.PromptHtml != null)
                    hashCode = hashCode * 59 + this.PromptHtml.GetHashCode();
                if (this.ScheduledSendDate != null)
                    hashCode = hashCode * 59 + this.ScheduledSendDate.GetHashCode();
                if (this.ClientGroupId != null)
                    hashCode = hashCode * 59 + this.ClientGroupId.GetHashCode();
                if (this.ThumbnailUrl != null)
                    hashCode = hashCode * 59 + this.ThumbnailUrl.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.LastNotified != null)
                    hashCode = hashCode * 59 + this.LastNotified.GetHashCode();
                if (this.SendMechanism != null)
                    hashCode = hashCode * 59 + this.SendMechanism.GetHashCode();
                if (this.SendTypes != null)
                    hashCode = hashCode * 59 + this.SendTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
