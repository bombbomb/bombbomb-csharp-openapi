/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns></returns>
        void CreatePrintingPressEmail (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null);

        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePrintingPressEmailWithHttpInfo (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null);
        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns></returns>
        void GetEmailTracking (string emailId, string jobId = null);

        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEmailTrackingWithHttpInfo (string emailId, string jobId = null);
        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns></returns>
        void GetEmailTrackingInteractions (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);

        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEmailTrackingInteractionsWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);
        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns></returns>
        void GetHourlyEmailTracking (string emailId, string jobId = null, string interactionType = null);

        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetHourlyEmailTrackingWithHttpInfo (string emailId, string jobId = null, string interactionType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePrintingPressEmailAsync (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null);

        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrintingPressEmailAsyncWithHttpInfo (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null);
        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEmailTrackingAsync (string emailId, string jobId = null);

        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null);
        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEmailTrackingInteractionsAsync (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);

        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingInteractionsAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);
        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetHourlyEmailTrackingAsync (string emailId, string jobId = null, string interactionType = null);

        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHourlyEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailsApi : IEmailsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns></returns>
        public void CreatePrintingPressEmail (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null)
        {
             CreatePrintingPressEmailWithHttpInfo(templateId, content, replace, videoId, subjectLine);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePrintingPressEmailWithHttpInfo (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'replace' is set
            if (replace == null)
                throw new ApiException(400, "Missing required parameter 'replace' when calling EmailsApi->CreatePrintingPressEmail");

            var localVarPath = "/emails/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter
            if (replace != null) localVarFormParams.Add("replace", Configuration.ApiClient.ParameterToString(replace)); // form parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (subjectLine != null) localVarFormParams.Add("subjectLine", Configuration.ApiClient.ParameterToString(subjectLine)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrintingPressEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePrintingPressEmailAsync (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null)
        {
             await CreatePrintingPressEmailAsyncWithHttpInfo(templateId, content, replace, videoId, subjectLine);

        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id, is include it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="replace">Set whether to replace video placeholders with video id.</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrintingPressEmailAsyncWithHttpInfo (string templateId, string content, bool? replace, string videoId = null, string subjectLine = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'replace' is set
            if (replace == null)
                throw new ApiException(400, "Missing required parameter 'replace' when calling EmailsApi->CreatePrintingPressEmail");

            var localVarPath = "/emails/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter
            if (replace != null) localVarFormParams.Add("replace", Configuration.ApiClient.ParameterToString(replace)); // form parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (subjectLine != null) localVarFormParams.Add("subjectLine", Configuration.ApiClient.ParameterToString(subjectLine)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrintingPressEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns></returns>
        public void GetEmailTracking (string emailId, string jobId = null)
        {
             GetEmailTrackingWithHttpInfo(emailId, jobId);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEmailTrackingWithHttpInfo (string emailId, string jobId = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEmailTrackingAsync (string emailId, string jobId = null)
        {
             await GetEmailTrackingAsyncWithHttpInfo(emailId, jobId);

        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns></returns>
        public void GetEmailTrackingInteractions (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
             GetEmailTrackingInteractionsWithHttpInfo(emailId, jobId, interactionType, searchTerm);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEmailTrackingInteractionsWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTrackingInteractions");

            var localVarPath = "/emails/{emailId}/tracking/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (searchTerm != null) localVarQueryParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTrackingInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEmailTrackingInteractionsAsync (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
             await GetEmailTrackingInteractionsAsyncWithHttpInfo(emailId, jobId, interactionType, searchTerm);

        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingInteractionsAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTrackingInteractions");

            var localVarPath = "/emails/{emailId}/tracking/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (searchTerm != null) localVarQueryParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTrackingInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns></returns>
        public void GetHourlyEmailTracking (string emailId, string jobId = null, string interactionType = null)
        {
             GetHourlyEmailTrackingWithHttpInfo(emailId, jobId, interactionType);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetHourlyEmailTrackingWithHttpInfo (string emailId, string jobId = null, string interactionType = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetHourlyEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHourlyEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetHourlyEmailTrackingAsync (string emailId, string jobId = null, string interactionType = null)
        {
             await GetHourlyEmailTrackingAsyncWithHttpInfo(emailId, jobId, interactionType);

        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHourlyEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetHourlyEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHourlyEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
