/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.21454
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Member to Team
        /// </summary>
        /// <remarks>
        /// Adds a member to a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>string</returns>
        string AddTeamMember (string teamId, string userId = null, string userEmail = null, bool? admin = null);

        /// <summary>
        /// Add Member to Team
        /// </summary>
        /// <remarks>
        /// Adds a member to a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddTeamMemberWithHttpInfo (string teamId, string userId = null, string userEmail = null, bool? admin = null);
        /// <summary>
        /// Cancel a Jericho Send
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled Jericho send from being sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns></returns>
        void CancelJerichoSend (string jerichoId);

        /// <summary>
        /// Cancel a Jericho Send
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled Jericho send from being sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelJerichoSendWithHttpInfo (string jerichoId);
        /// <summary>
        /// Add a Subteam
        /// </summary>
        /// <remarks>
        /// Adds a subteam to a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>TeamPublicRepresentation</returns>
        TeamPublicRepresentation CreateSubteam (string teamId, string name);

        /// <summary>
        /// Add a Subteam
        /// </summary>
        /// <remarks>
        /// Adds a subteam to a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>ApiResponse of TeamPublicRepresentation</returns>
        ApiResponse<TeamPublicRepresentation> CreateSubteamWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Delete Subteam
        /// </summary>
        /// <remarks>
        /// Deletes a subteam
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>string</returns>
        string DeleteSubteam (string teamId, string subteamId);

        /// <summary>
        /// Delete Subteam
        /// </summary>
        /// <remarks>
        /// Deletes a subteam
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteSubteamWithHttpInfo (string teamId, string subteamId);
        /// <summary>
        /// Lists team assets
        /// </summary>
        /// <remarks>
        /// Returns a collection of assets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetClientGroupAssets (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null);

        /// <summary>
        /// Lists team assets
        /// </summary>
        /// <remarks>
        /// Returns a collection of assets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetClientGroupAssetsWithHttpInfo (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null);
        /// <summary>
        /// List Jericho Sends
        /// </summary>
        /// <remarks>
        /// Lists Jericho sends, both pending and sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>List&lt;JerichoConfiguration&gt;</returns>
        List<JerichoConfiguration> GetJerichoSends (string teamId);

        /// <summary>
        /// List Jericho Sends
        /// </summary>
        /// <remarks>
        /// Lists Jericho sends, both pending and sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>ApiResponse of List&lt;JerichoConfiguration&gt;</returns>
        ApiResponse<List<JerichoConfiguration>> GetJerichoSendsWithHttpInfo (string teamId);
        /// <summary>
        /// Gets Jericho performance statistics
        /// </summary>
        /// <remarks>
        /// Returns an aggregate view of the performance of a Jericho send
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>JerichoPerformance</returns>
        JerichoPerformance GetJerichoStats (string jerichoId, string teamId);

        /// <summary>
        /// Gets Jericho performance statistics
        /// </summary>
        /// <remarks>
        /// Returns an aggregate view of the performance of a Jericho send
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>ApiResponse of JerichoPerformance</returns>
        ApiResponse<JerichoPerformance> GetJerichoStatsWithHttpInfo (string jerichoId, string teamId);
        /// <summary>
        /// List Subteams
        /// </summary>
        /// <remarks>
        /// Returns a collection of subteams for a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>List&lt;TeamPublicRepresentation&gt;</returns>
        List<TeamPublicRepresentation> GetSubteams (string teamId);

        /// <summary>
        /// List Subteams
        /// </summary>
        /// <remarks>
        /// Returns a collection of subteams for a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>ApiResponse of List&lt;TeamPublicRepresentation&gt;</returns>
        ApiResponse<List<TeamPublicRepresentation>> GetSubteamsWithHttpInfo (string teamId);
        /// <summary>
        /// Creates a Jericho send.
        /// </summary>
        /// <remarks>
        /// Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>JerichoConfiguration</returns>
        JerichoConfiguration QueueJerichoSend (JerichoConfiguration config, string teamId);

        /// <summary>
        /// Creates a Jericho send.
        /// </summary>
        /// <remarks>
        /// Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>ApiResponse of JerichoConfiguration</returns>
        ApiResponse<JerichoConfiguration> QueueJerichoSendWithHttpInfo (JerichoConfiguration config, string teamId);
        /// <summary>
        /// Remove Member from Team
        /// </summary>
        /// <remarks>
        /// Removes a member from a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>string</returns>
        string RemoveMemberFromTeam (string teamId, string userId);

        /// <summary>
        /// Remove Member from Team
        /// </summary>
        /// <remarks>
        /// Removes a member from a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RemoveMemberFromTeamWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update fields on a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>TeamPublicRepresentation</returns>
        TeamPublicRepresentation UpdateTeam (string teamId, string name = null);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update fields on a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>ApiResponse of TeamPublicRepresentation</returns>
        ApiResponse<TeamPublicRepresentation> UpdateTeamWithHttpInfo (string teamId, string name = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Member to Team
        /// </summary>
        /// <remarks>
        /// Adds a member to a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddTeamMemberAsync (string teamId, string userId = null, string userEmail = null, bool? admin = null);

        /// <summary>
        /// Add Member to Team
        /// </summary>
        /// <remarks>
        /// Adds a member to a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddTeamMemberAsyncWithHttpInfo (string teamId, string userId = null, string userEmail = null, bool? admin = null);
        /// <summary>
        /// Cancel a Jericho Send
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled Jericho send from being sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelJerichoSendAsync (string jerichoId);

        /// <summary>
        /// Cancel a Jericho Send
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled Jericho send from being sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelJerichoSendAsyncWithHttpInfo (string jerichoId);
        /// <summary>
        /// Add a Subteam
        /// </summary>
        /// <remarks>
        /// Adds a subteam to a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>Task of TeamPublicRepresentation</returns>
        System.Threading.Tasks.Task<TeamPublicRepresentation> CreateSubteamAsync (string teamId, string name);

        /// <summary>
        /// Add a Subteam
        /// </summary>
        /// <remarks>
        /// Adds a subteam to a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>Task of ApiResponse (TeamPublicRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamPublicRepresentation>> CreateSubteamAsyncWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Delete Subteam
        /// </summary>
        /// <remarks>
        /// Deletes a subteam
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteSubteamAsync (string teamId, string subteamId);

        /// <summary>
        /// Delete Subteam
        /// </summary>
        /// <remarks>
        /// Deletes a subteam
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteSubteamAsyncWithHttpInfo (string teamId, string subteamId);
        /// <summary>
        /// Lists team assets
        /// </summary>
        /// <remarks>
        /// Returns a collection of assets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetClientGroupAssetsAsync (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null);

        /// <summary>
        /// Lists team assets
        /// </summary>
        /// <remarks>
        /// Returns a collection of assets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetClientGroupAssetsAsyncWithHttpInfo (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null);
        /// <summary>
        /// List Jericho Sends
        /// </summary>
        /// <remarks>
        /// Lists Jericho sends, both pending and sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>Task of List&lt;JerichoConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<JerichoConfiguration>> GetJerichoSendsAsync (string teamId);

        /// <summary>
        /// List Jericho Sends
        /// </summary>
        /// <remarks>
        /// Lists Jericho sends, both pending and sent.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>Task of ApiResponse (List&lt;JerichoConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JerichoConfiguration>>> GetJerichoSendsAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Gets Jericho performance statistics
        /// </summary>
        /// <remarks>
        /// Returns an aggregate view of the performance of a Jericho send
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>Task of JerichoPerformance</returns>
        System.Threading.Tasks.Task<JerichoPerformance> GetJerichoStatsAsync (string jerichoId, string teamId);

        /// <summary>
        /// Gets Jericho performance statistics
        /// </summary>
        /// <remarks>
        /// Returns an aggregate view of the performance of a Jericho send
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>Task of ApiResponse (JerichoPerformance)</returns>
        System.Threading.Tasks.Task<ApiResponse<JerichoPerformance>> GetJerichoStatsAsyncWithHttpInfo (string jerichoId, string teamId);
        /// <summary>
        /// List Subteams
        /// </summary>
        /// <remarks>
        /// Returns a collection of subteams for a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>Task of List&lt;TeamPublicRepresentation&gt;</returns>
        System.Threading.Tasks.Task<List<TeamPublicRepresentation>> GetSubteamsAsync (string teamId);

        /// <summary>
        /// List Subteams
        /// </summary>
        /// <remarks>
        /// Returns a collection of subteams for a parent team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>Task of ApiResponse (List&lt;TeamPublicRepresentation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamPublicRepresentation>>> GetSubteamsAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Creates a Jericho send.
        /// </summary>
        /// <remarks>
        /// Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>Task of JerichoConfiguration</returns>
        System.Threading.Tasks.Task<JerichoConfiguration> QueueJerichoSendAsync (JerichoConfiguration config, string teamId);

        /// <summary>
        /// Creates a Jericho send.
        /// </summary>
        /// <remarks>
        /// Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>Task of ApiResponse (JerichoConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<JerichoConfiguration>> QueueJerichoSendAsyncWithHttpInfo (JerichoConfiguration config, string teamId);
        /// <summary>
        /// Remove Member from Team
        /// </summary>
        /// <remarks>
        /// Removes a member from a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RemoveMemberFromTeamAsync (string teamId, string userId);

        /// <summary>
        /// Remove Member from Team
        /// </summary>
        /// <remarks>
        /// Removes a member from a team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RemoveMemberFromTeamAsyncWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update fields on a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>Task of TeamPublicRepresentation</returns>
        System.Threading.Tasks.Task<TeamPublicRepresentation> UpdateTeamAsync (string teamId, string name = null);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update fields on a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>Task of ApiResponse (TeamPublicRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamPublicRepresentation>> UpdateTeamAsyncWithHttpInfo (string teamId, string name = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Member to Team Adds a member to a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>string</returns>
        public string AddTeamMember (string teamId, string userId = null, string userEmail = null, bool? admin = null)
        {
             ApiResponse<string> localVarResponse = AddTeamMemberWithHttpInfo(teamId, userId, userEmail, admin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Member to Team Adds a member to a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddTeamMemberWithHttpInfo (string teamId, string userId = null, string userEmail = null, bool? admin = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->AddTeamMember");

            var localVarPath = "/team/{teamId}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (userEmail != null) localVarFormParams.Add("userEmail", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (admin != null) localVarFormParams.Add("admin", Configuration.ApiClient.ParameterToString(admin)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Add Member to Team Adds a member to a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddTeamMemberAsync (string teamId, string userId = null, string userEmail = null, bool? admin = null)
        {
             ApiResponse<string> localVarResponse = await AddTeamMemberAsyncWithHttpInfo(teamId, userId, userEmail, admin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Member to Team Adds a member to a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being added to the team. (optional)</param>
        /// <param name="userEmail">The email of the member being added to the team. (optional)</param>
        /// <param name="admin">Set if the user is an admin of this team. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddTeamMemberAsyncWithHttpInfo (string teamId, string userId = null, string userEmail = null, bool? admin = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->AddTeamMember");

            var localVarPath = "/team/{teamId}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (userEmail != null) localVarFormParams.Add("userEmail", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (admin != null) localVarFormParams.Add("admin", Configuration.ApiClient.ParameterToString(admin)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Cancel a Jericho Send Cancels a scheduled Jericho send from being sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns></returns>
        public void CancelJerichoSend (string jerichoId)
        {
             CancelJerichoSendWithHttpInfo(jerichoId);
        }

        /// <summary>
        /// Cancel a Jericho Send Cancels a scheduled Jericho send from being sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelJerichoSendWithHttpInfo (string jerichoId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling TeamsApi->CancelJerichoSend");

            var localVarPath = "/team/{teamId}/jericho/{jerichoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarPathParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJerichoSend", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a Jericho Send Cancels a scheduled Jericho send from being sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelJerichoSendAsync (string jerichoId)
        {
             await CancelJerichoSendAsyncWithHttpInfo(jerichoId);

        }

        /// <summary>
        /// Cancel a Jericho Send Cancels a scheduled Jericho send from being sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho Job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelJerichoSendAsyncWithHttpInfo (string jerichoId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling TeamsApi->CancelJerichoSend");

            var localVarPath = "/team/{teamId}/jericho/{jerichoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarPathParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJerichoSend", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a Subteam Adds a subteam to a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>TeamPublicRepresentation</returns>
        public TeamPublicRepresentation CreateSubteam (string teamId, string name)
        {
             ApiResponse<TeamPublicRepresentation> localVarResponse = CreateSubteamWithHttpInfo(teamId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Subteam Adds a subteam to a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>ApiResponse of TeamPublicRepresentation</returns>
        public ApiResponse< TeamPublicRepresentation > CreateSubteamWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->CreateSubteam");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TeamsApi->CreateSubteam");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPublicRepresentation)));
            
        }

        /// <summary>
        /// Add a Subteam Adds a subteam to a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>Task of TeamPublicRepresentation</returns>
        public async System.Threading.Tasks.Task<TeamPublicRepresentation> CreateSubteamAsync (string teamId, string name)
        {
             ApiResponse<TeamPublicRepresentation> localVarResponse = await CreateSubteamAsyncWithHttpInfo(teamId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Subteam Adds a subteam to a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The subteam&#39;s name.</param>
        /// <returns>Task of ApiResponse (TeamPublicRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamPublicRepresentation>> CreateSubteamAsyncWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->CreateSubteam");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TeamsApi->CreateSubteam");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPublicRepresentation)));
            
        }

        /// <summary>
        /// Delete Subteam Deletes a subteam
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>string</returns>
        public string DeleteSubteam (string teamId, string subteamId)
        {
             ApiResponse<string> localVarResponse = DeleteSubteamWithHttpInfo(teamId, subteamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Subteam Deletes a subteam
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteSubteamWithHttpInfo (string teamId, string subteamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteSubteam");
            // verify the required parameter 'subteamId' is set
            if (subteamId == null)
                throw new ApiException(400, "Missing required parameter 'subteamId' when calling TeamsApi->DeleteSubteam");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (subteamId != null) localVarFormParams.Add("subteamId", Configuration.ApiClient.ParameterToString(subteamId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Delete Subteam Deletes a subteam
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteSubteamAsync (string teamId, string subteamId)
        {
             ApiResponse<string> localVarResponse = await DeleteSubteamAsyncWithHttpInfo(teamId, subteamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Subteam Deletes a subteam
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="subteamId">The subteam you wish to delete.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteSubteamAsyncWithHttpInfo (string teamId, string subteamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteSubteam");
            // verify the required parameter 'subteamId' is set
            if (subteamId == null)
                throw new ApiException(400, "Missing required parameter 'subteamId' when calling TeamsApi->DeleteSubteam");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (subteamId != null) localVarFormParams.Add("subteamId", Configuration.ApiClient.ParameterToString(subteamId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Lists team assets Returns a collection of assets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetClientGroupAssets (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetClientGroupAssetsWithHttpInfo(assetType, teamId, autoTagName, pageSize, page, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists team assets Returns a collection of assets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetClientGroupAssetsWithHttpInfo (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null)
        {
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new ApiException(400, "Missing required parameter 'assetType' when calling TeamsApi->GetClientGroupAssets");

            var localVarPath = "/team/assets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetType != null) localVarQueryParams.Add("assetType", Configuration.ApiClient.ParameterToString(assetType)); // query parameter
            if (teamId != null) localVarQueryParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // query parameter
            if (autoTagName != null) localVarQueryParams.Add("autoTagName", Configuration.ApiClient.ParameterToString(autoTagName)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientGroupAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Lists team assets Returns a collection of assets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetClientGroupAssetsAsync (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetClientGroupAssetsAsyncWithHttpInfo(assetType, teamId, autoTagName, pageSize, page, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists team assets Returns a collection of assets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType">The type of assets.</param>
        /// <param name="teamId">The team containing the assets. (optional)</param>
        /// <param name="autoTagName">The auto tag name containing the assets. (optional)</param>
        /// <param name="pageSize">The number of items to retrieve in a single db query. (optional)</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db. (optional)</param>
        /// <param name="search">Search words. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetClientGroupAssetsAsyncWithHttpInfo (string assetType, string teamId = null, string autoTagName = null, string pageSize = null, string page = null, string search = null)
        {
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new ApiException(400, "Missing required parameter 'assetType' when calling TeamsApi->GetClientGroupAssets");

            var localVarPath = "/team/assets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetType != null) localVarQueryParams.Add("assetType", Configuration.ApiClient.ParameterToString(assetType)); // query parameter
            if (teamId != null) localVarQueryParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // query parameter
            if (autoTagName != null) localVarQueryParams.Add("autoTagName", Configuration.ApiClient.ParameterToString(autoTagName)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientGroupAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// List Jericho Sends Lists Jericho sends, both pending and sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>List&lt;JerichoConfiguration&gt;</returns>
        public List<JerichoConfiguration> GetJerichoSends (string teamId)
        {
             ApiResponse<List<JerichoConfiguration>> localVarResponse = GetJerichoSendsWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Jericho Sends Lists Jericho sends, both pending and sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>ApiResponse of List&lt;JerichoConfiguration&gt;</returns>
        public ApiResponse< List<JerichoConfiguration> > GetJerichoSendsWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetJerichoSends");

            var localVarPath = "/team/{teamId}/jericho";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJerichoSends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JerichoConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JerichoConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JerichoConfiguration>)));
            
        }

        /// <summary>
        /// List Jericho Sends Lists Jericho sends, both pending and sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>Task of List&lt;JerichoConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<JerichoConfiguration>> GetJerichoSendsAsync (string teamId)
        {
             ApiResponse<List<JerichoConfiguration>> localVarResponse = await GetJerichoSendsAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Jericho Sends Lists Jericho sends, both pending and sent.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team whose Jericho sends you wish to see.</param>
        /// <returns>Task of ApiResponse (List&lt;JerichoConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JerichoConfiguration>>> GetJerichoSendsAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetJerichoSends");

            var localVarPath = "/team/{teamId}/jericho";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJerichoSends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JerichoConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JerichoConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JerichoConfiguration>)));
            
        }

        /// <summary>
        /// Gets Jericho performance statistics Returns an aggregate view of the performance of a Jericho send
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>JerichoPerformance</returns>
        public JerichoPerformance GetJerichoStats (string jerichoId, string teamId)
        {
             ApiResponse<JerichoPerformance> localVarResponse = GetJerichoStatsWithHttpInfo(jerichoId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Jericho performance statistics Returns an aggregate view of the performance of a Jericho send
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>ApiResponse of JerichoPerformance</returns>
        public ApiResponse< JerichoPerformance > GetJerichoStatsWithHttpInfo (string jerichoId, string teamId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling TeamsApi->GetJerichoStats");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetJerichoStats");

            var localVarPath = "/team/{teamId}/jericho/{jerichoId}/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarPathParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJerichoStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JerichoPerformance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JerichoPerformance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JerichoPerformance)));
            
        }

        /// <summary>
        /// Gets Jericho performance statistics Returns an aggregate view of the performance of a Jericho send
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>Task of JerichoPerformance</returns>
        public async System.Threading.Tasks.Task<JerichoPerformance> GetJerichoStatsAsync (string jerichoId, string teamId)
        {
             ApiResponse<JerichoPerformance> localVarResponse = await GetJerichoStatsAsyncWithHttpInfo(jerichoId, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Jericho performance statistics Returns an aggregate view of the performance of a Jericho send
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jerichoId">ID of the Jericho job</param>
        /// <param name="teamId">ID of team through which Jericho was sent</param>
        /// <returns>Task of ApiResponse (JerichoPerformance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JerichoPerformance>> GetJerichoStatsAsyncWithHttpInfo (string jerichoId, string teamId)
        {
            // verify the required parameter 'jerichoId' is set
            if (jerichoId == null)
                throw new ApiException(400, "Missing required parameter 'jerichoId' when calling TeamsApi->GetJerichoStats");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetJerichoStats");

            var localVarPath = "/team/{teamId}/jericho/{jerichoId}/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jerichoId != null) localVarPathParams.Add("jerichoId", Configuration.ApiClient.ParameterToString(jerichoId)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJerichoStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JerichoPerformance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JerichoPerformance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JerichoPerformance)));
            
        }

        /// <summary>
        /// List Subteams Returns a collection of subteams for a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>List&lt;TeamPublicRepresentation&gt;</returns>
        public List<TeamPublicRepresentation> GetSubteams (string teamId)
        {
             ApiResponse<List<TeamPublicRepresentation>> localVarResponse = GetSubteamsWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Subteams Returns a collection of subteams for a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>ApiResponse of List&lt;TeamPublicRepresentation&gt;</returns>
        public ApiResponse< List<TeamPublicRepresentation> > GetSubteamsWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetSubteams");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamPublicRepresentation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamPublicRepresentation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamPublicRepresentation>)));
            
        }

        /// <summary>
        /// List Subteams Returns a collection of subteams for a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>Task of List&lt;TeamPublicRepresentation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamPublicRepresentation>> GetSubteamsAsync (string teamId)
        {
             ApiResponse<List<TeamPublicRepresentation>> localVarResponse = await GetSubteamsAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Subteams Returns a collection of subteams for a parent team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <returns>Task of ApiResponse (List&lt;TeamPublicRepresentation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamPublicRepresentation>>> GetSubteamsAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetSubteams");

            var localVarPath = "/team/{teamId}/subteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamPublicRepresentation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamPublicRepresentation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamPublicRepresentation>)));
            
        }

        /// <summary>
        /// Creates a Jericho send. Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>JerichoConfiguration</returns>
        public JerichoConfiguration QueueJerichoSend (JerichoConfiguration config, string teamId)
        {
             ApiResponse<JerichoConfiguration> localVarResponse = QueueJerichoSendWithHttpInfo(config, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Jericho send. Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>ApiResponse of JerichoConfiguration</returns>
        public ApiResponse< JerichoConfiguration > QueueJerichoSendWithHttpInfo (JerichoConfiguration config, string teamId)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling TeamsApi->QueueJerichoSend");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->QueueJerichoSend");

            var localVarPath = "/team/{teamId}/jericho";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (config != null && config.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(config); // http body (model) parameter
            }
            else
            {
                localVarPostBody = config; // byte array
            }

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueJerichoSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JerichoConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JerichoConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JerichoConfiguration)));
            
        }

        /// <summary>
        /// Creates a Jericho send. Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>Task of JerichoConfiguration</returns>
        public async System.Threading.Tasks.Task<JerichoConfiguration> QueueJerichoSendAsync (JerichoConfiguration config, string teamId)
        {
             ApiResponse<JerichoConfiguration> localVarResponse = await QueueJerichoSendAsyncWithHttpInfo(config, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Jericho send. Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="config">JSON representing a Jericho configuration</param>
        /// <param name="teamId">The ID of the team.</param>
        /// <returns>Task of ApiResponse (JerichoConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JerichoConfiguration>> QueueJerichoSendAsyncWithHttpInfo (JerichoConfiguration config, string teamId)
        {
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling TeamsApi->QueueJerichoSend");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->QueueJerichoSend");

            var localVarPath = "/team/{teamId}/jericho";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (config != null && config.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(config); // http body (model) parameter
            }
            else
            {
                localVarPostBody = config; // byte array
            }

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueJerichoSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JerichoConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JerichoConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JerichoConfiguration)));
            
        }

        /// <summary>
        /// Remove Member from Team Removes a member from a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>string</returns>
        public string RemoveMemberFromTeam (string teamId, string userId)
        {
             ApiResponse<string> localVarResponse = RemoveMemberFromTeamWithHttpInfo(teamId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Member from Team Removes a member from a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > RemoveMemberFromTeamWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RemoveMemberFromTeam");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->RemoveMemberFromTeam");

            var localVarPath = "/team/{teamId}/member/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMemberFromTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Remove Member from Team Removes a member from a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RemoveMemberFromTeamAsync (string teamId, string userId)
        {
             ApiResponse<string> localVarResponse = await RemoveMemberFromTeamAsyncWithHttpInfo(teamId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Member from Team Removes a member from a team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="userId">The user id of the member being removed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> RemoveMemberFromTeamAsyncWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RemoveMemberFromTeam");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->RemoveMemberFromTeam");

            var localVarPath = "/team/{teamId}/member/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMemberFromTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Update a team Update fields on a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>TeamPublicRepresentation</returns>
        public TeamPublicRepresentation UpdateTeam (string teamId, string name = null)
        {
             ApiResponse<TeamPublicRepresentation> localVarResponse = UpdateTeamWithHttpInfo(teamId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a team Update fields on a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>ApiResponse of TeamPublicRepresentation</returns>
        public ApiResponse< TeamPublicRepresentation > UpdateTeamWithHttpInfo (string teamId, string name = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/team/{teamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPublicRepresentation)));
            
        }

        /// <summary>
        /// Update a team Update fields on a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>Task of TeamPublicRepresentation</returns>
        public async System.Threading.Tasks.Task<TeamPublicRepresentation> UpdateTeamAsync (string teamId, string name = null)
        {
             ApiResponse<TeamPublicRepresentation> localVarResponse = await UpdateTeamAsyncWithHttpInfo(teamId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a team Update fields on a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="name">The name of the team (optional)</param>
        /// <returns>Task of ApiResponse (TeamPublicRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamPublicRepresentation>> UpdateTeamAsyncWithHttpInfo (string teamId, string name = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/team/{teamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPublicRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPublicRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPublicRepresentation)));
            
        }

    }
}
