/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The VideoEncodingStatusResponse class
    /// </summary>
    [DataContract]
    public partial class VideoEncodingStatusResponse :  IEquatable<VideoEncodingStatusResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoEncodingStatusResponse" /> class.
        /// </summary>
        /// <param name="IsReady">Returns true if the video is done encoding and finalized..</param>
        /// <param name="IsFailed">Returns true if the video encoding process failed..</param>
        /// <param name="Progress">0-100 value indicating progress of video encoding process..</param>
        public VideoEncodingStatusResponse(bool? IsReady = null, bool? IsFailed = null, int? Progress = null)
        {
            this.IsReady = IsReady;
            this.IsFailed = IsFailed;
            this.Progress = Progress;
        }
        
        /// <summary>
        /// Returns true if the video is done encoding and finalized.
        /// </summary>
        /// <value>Returns true if the video is done encoding and finalized.</value>
        [DataMember(Name="isReady", EmitDefaultValue=false)]
        public bool? IsReady { get; set; }
        /// <summary>
        /// Returns true if the video encoding process failed.
        /// </summary>
        /// <value>Returns true if the video encoding process failed.</value>
        [DataMember(Name="isFailed", EmitDefaultValue=false)]
        public bool? IsFailed { get; set; }
        /// <summary>
        /// 0-100 value indicating progress of video encoding process.
        /// </summary>
        /// <value>0-100 value indicating progress of video encoding process.</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoEncodingStatusResponse {\n");
            sb.Append("  IsReady: ").Append(IsReady).Append("\n");
            sb.Append("  IsFailed: ").Append(IsFailed).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VideoEncodingStatusResponse);
        }

        /// <summary>
        /// Returns true if VideoEncodingStatusResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of VideoEncodingStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoEncodingStatusResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsReady == other.IsReady ||
                    this.IsReady != null &&
                    this.IsReady.Equals(other.IsReady)
                ) && 
                (
                    this.IsFailed == other.IsFailed ||
                    this.IsFailed != null &&
                    this.IsFailed.Equals(other.IsFailed)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsReady != null)
                    hash = hash * 59 + this.IsReady.GetHashCode();
                if (this.IsFailed != null)
                    hash = hash * 59 + this.IsFailed.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                return hash;
            }
        }
    }

}
