/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Deletes a users file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns></returns>
        void DocHostDelete (string docId);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Deletes a users file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocHostDeleteWithHttpInfo (string docId);
        /// <summary>
        /// Get file
        /// </summary>
        /// <remarks>
        /// Get a single file by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>HostedDoc</returns>
        HostedDoc DocHostGet (string docId);

        /// <summary>
        /// Get file
        /// </summary>
        /// <remarks>
        /// Get a single file by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>ApiResponse of HostedDoc</returns>
        ApiResponse<HostedDoc> DocHostGetWithHttpInfo (string docId);
        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// List all uploaded user files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;HostedDoc&gt;</returns>
        List<HostedDoc> DocHostList ();

        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// List all uploaded user files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;HostedDoc&gt;</returns>
        ApiResponse<List<HostedDoc>> DocHostListWithHttpInfo ();
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>List&lt;HostedDoc&gt;</returns>
        List<HostedDoc> DocHostUploadV2 (string file);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>ApiResponse of List&lt;HostedDoc&gt;</returns>
        ApiResponse<List<HostedDoc>> DocHostUploadV2WithHttpInfo (string file);
        /// <summary>
        /// Get paged hosted images
        /// </summary>
        /// <remarks>
        /// Get a specific page of uploaded images available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns></returns>
        void GetHostedImagesPaged (string pageSize, string page, string search = null);

        /// <summary>
        /// Get paged hosted images
        /// </summary>
        /// <remarks>
        /// Get a specific page of uploaded images available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetHostedImagesPagedWithHttpInfo (string pageSize, string page, string search = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Deletes a users file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocHostDeleteAsync (string docId);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Deletes a users file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocHostDeleteAsyncWithHttpInfo (string docId);
        /// <summary>
        /// Get file
        /// </summary>
        /// <remarks>
        /// Get a single file by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of HostedDoc</returns>
        System.Threading.Tasks.Task<HostedDoc> DocHostGetAsync (string docId);

        /// <summary>
        /// Get file
        /// </summary>
        /// <remarks>
        /// Get a single file by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of ApiResponse (HostedDoc)</returns>
        System.Threading.Tasks.Task<ApiResponse<HostedDoc>> DocHostGetAsyncWithHttpInfo (string docId);
        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// List all uploaded user files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;HostedDoc&gt;</returns>
        System.Threading.Tasks.Task<List<HostedDoc>> DocHostListAsync ();

        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// List all uploaded user files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;HostedDoc&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HostedDoc>>> DocHostListAsyncWithHttpInfo ();
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>Task of List&lt;HostedDoc&gt;</returns>
        System.Threading.Tasks.Task<List<HostedDoc>> DocHostUploadV2Async (string file);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>Task of ApiResponse (List&lt;HostedDoc&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HostedDoc>>> DocHostUploadV2AsyncWithHttpInfo (string file);
        /// <summary>
        /// Get paged hosted images
        /// </summary>
        /// <remarks>
        /// Get a specific page of uploaded images available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetHostedImagesPagedAsync (string pageSize, string page, string search = null);

        /// <summary>
        /// Get paged hosted images
        /// </summary>
        /// <remarks>
        /// Get a specific page of uploaded images available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHostedImagesPagedAsyncWithHttpInfo (string pageSize, string page, string search = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete file Deletes a users file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns></returns>
        public void DocHostDelete (string docId)
        {
             DocHostDeleteWithHttpInfo(docId);
        }

        /// <summary>
        /// Delete file Deletes a users file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocHostDeleteWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling FilesApi->DocHostDelete");

            var localVarPath = "/files/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docId != null) localVarPathParams.Add("docId", Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete file Deletes a users file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocHostDeleteAsync (string docId)
        {
             await DocHostDeleteAsyncWithHttpInfo(docId);

        }

        /// <summary>
        /// Delete file Deletes a users file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocHostDeleteAsyncWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling FilesApi->DocHostDelete");

            var localVarPath = "/files/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docId != null) localVarPathParams.Add("docId", Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get file Get a single file by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>HostedDoc</returns>
        public HostedDoc DocHostGet (string docId)
        {
             ApiResponse<HostedDoc> localVarResponse = DocHostGetWithHttpInfo(docId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file Get a single file by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>ApiResponse of HostedDoc</returns>
        public ApiResponse< HostedDoc > DocHostGetWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling FilesApi->DocHostGet");

            var localVarPath = "/files/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docId != null) localVarPathParams.Add("docId", Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HostedDoc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HostedDoc) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HostedDoc)));
            
        }

        /// <summary>
        /// Get file Get a single file by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of HostedDoc</returns>
        public async System.Threading.Tasks.Task<HostedDoc> DocHostGetAsync (string docId)
        {
             ApiResponse<HostedDoc> localVarResponse = await DocHostGetAsyncWithHttpInfo(docId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file Get a single file by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Id of document</param>
        /// <returns>Task of ApiResponse (HostedDoc)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HostedDoc>> DocHostGetAsyncWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling FilesApi->DocHostGet");

            var localVarPath = "/files/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docId != null) localVarPathParams.Add("docId", Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HostedDoc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HostedDoc) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HostedDoc)));
            
        }

        /// <summary>
        /// List all files List all uploaded user files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;HostedDoc&gt;</returns>
        public List<HostedDoc> DocHostList ()
        {
             ApiResponse<List<HostedDoc>> localVarResponse = DocHostListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all files List all uploaded user files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;HostedDoc&gt;</returns>
        public ApiResponse< List<HostedDoc> > DocHostListWithHttpInfo ()
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostedDoc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HostedDoc>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostedDoc>)));
            
        }

        /// <summary>
        /// List all files List all uploaded user files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;HostedDoc&gt;</returns>
        public async System.Threading.Tasks.Task<List<HostedDoc>> DocHostListAsync ()
        {
             ApiResponse<List<HostedDoc>> localVarResponse = await DocHostListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all files List all uploaded user files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;HostedDoc&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HostedDoc>>> DocHostListAsyncWithHttpInfo ()
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostedDoc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HostedDoc>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostedDoc>)));
            
        }

        /// <summary>
        /// Upload a file Upload a new file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>List&lt;HostedDoc&gt;</returns>
        public List<HostedDoc> DocHostUploadV2 (string file)
        {
             ApiResponse<List<HostedDoc>> localVarResponse = DocHostUploadV2WithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file Upload a new file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>ApiResponse of List&lt;HostedDoc&gt;</returns>
        public ApiResponse< List<HostedDoc> > DocHostUploadV2WithHttpInfo (string file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->DocHostUploadV2");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostUploadV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostedDoc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HostedDoc>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostedDoc>)));
            
        }

        /// <summary>
        /// Upload a file Upload a new file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>Task of List&lt;HostedDoc&gt;</returns>
        public async System.Threading.Tasks.Task<List<HostedDoc>> DocHostUploadV2Async (string file)
        {
             ApiResponse<List<HostedDoc>> localVarResponse = await DocHostUploadV2AsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a file Upload a new file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file being uploaded</param>
        /// <returns>Task of ApiResponse (List&lt;HostedDoc&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HostedDoc>>> DocHostUploadV2AsyncWithHttpInfo (string file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->DocHostUploadV2");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocHostUploadV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostedDoc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HostedDoc>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostedDoc>)));
            
        }

        /// <summary>
        /// Get paged hosted images Get a specific page of uploaded images available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns></returns>
        public void GetHostedImagesPaged (string pageSize, string page, string search = null)
        {
             GetHostedImagesPagedWithHttpInfo(pageSize, page, search);
        }

        /// <summary>
        /// Get paged hosted images Get a specific page of uploaded images available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetHostedImagesPagedWithHttpInfo (string pageSize, string page, string search = null)
        {
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling FilesApi->GetHostedImagesPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FilesApi->GetHostedImagesPaged");

            var localVarPath = "/files/images/paged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHostedImagesPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get paged hosted images Get a specific page of uploaded images available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetHostedImagesPagedAsync (string pageSize, string page, string search = null)
        {
             await GetHostedImagesPagedAsyncWithHttpInfo(pageSize, page, search);

        }

        /// <summary>
        /// Get paged hosted images Get a specific page of uploaded images available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to retrieve in a single db query.</param>
        /// <param name="page">Zero-based index of the page of data to retrieve from the db.</param>
        /// <param name="search">Filter results with names that match the search term. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHostedImagesPagedAsyncWithHttpInfo (string pageSize, string page, string search = null)
        {
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling FilesApi->GetHostedImagesPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FilesApi->GetHostedImagesPaged");

            var localVarPath = "/files/images/paged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHostedImagesPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
