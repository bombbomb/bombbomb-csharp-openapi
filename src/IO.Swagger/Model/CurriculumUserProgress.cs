/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The CurriculumUserProgress class
    /// </summary>
    [DataContract]
    public partial class CurriculumUserProgress :  IEquatable<CurriculumUserProgress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurriculumUserProgress" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserId">User Id.</param>
        /// <param name="CurriculumItemId">Curriculum Item Id.</param>
        /// <param name="CurriculumId">Curriculum Id.</param>
        /// <param name="CompletedDate">When the final email is scheduled to be sent.</param>
        public CurriculumUserProgress(string Id = default(string), string UserId = default(string), string CurriculumItemId = default(string), string CurriculumId = default(string), DateTime? CompletedDate = default(DateTime?))
        {
            this.Id = Id;
            this.UserId = UserId;
            this.CurriculumItemId = CurriculumItemId;
            this.CurriculumId = CurriculumId;
            this.CompletedDate = CompletedDate;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// User Id
        /// </summary>
        /// <value>User Id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Curriculum Item Id
        /// </summary>
        /// <value>Curriculum Item Id</value>
        [DataMember(Name="curriculumItemId", EmitDefaultValue=false)]
        public string CurriculumItemId { get; set; }

        /// <summary>
        /// Curriculum Id
        /// </summary>
        /// <value>Curriculum Id</value>
        [DataMember(Name="curriculumId", EmitDefaultValue=false)]
        public string CurriculumId { get; set; }

        /// <summary>
        /// When the final email is scheduled to be sent
        /// </summary>
        /// <value>When the final email is scheduled to be sent</value>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurriculumUserProgress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CurriculumItemId: ").Append(CurriculumItemId).Append("\n");
            sb.Append("  CurriculumId: ").Append(CurriculumId).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurriculumUserProgress);
        }

        /// <summary>
        /// Returns true if CurriculumUserProgress instances are equal
        /// </summary>
        /// <param name="input">Instance of CurriculumUserProgress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurriculumUserProgress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CurriculumItemId == input.CurriculumItemId ||
                    (this.CurriculumItemId != null &&
                    this.CurriculumItemId.Equals(input.CurriculumItemId))
                ) && 
                (
                    this.CurriculumId == input.CurriculumId ||
                    (this.CurriculumId != null &&
                    this.CurriculumId.Equals(input.CurriculumId))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CurriculumItemId != null)
                    hashCode = hashCode * 59 + this.CurriculumItemId.GetHashCode();
                if (this.CurriculumId != null)
                    hashCode = hashCode * 59 + this.CurriculumId.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
