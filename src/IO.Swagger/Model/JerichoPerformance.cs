/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Reports on the aggregate performance of a Jericho send
    /// </summary>
    [DataContract]
    public partial class JerichoPerformance :  IEquatable<JerichoPerformance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JerichoPerformance" /> class.
        /// </summary>
        /// <param name="JerichoId">The jericho id.</param>
        /// <param name="Sent">The number of emails sent.</param>
        /// <param name="UniqueViews">The unique number of people that viewed the email.</param>
        /// <param name="UniqueLandingPageViews">The unique number of people that visited the landing page.</param>
        /// <param name="LandingPageViews">The total number of people that visisted the landing page.</param>
        /// <param name="Delivered">The number of emails delivered, likely less than sent due to bounces, and other common delivery issues.</param>
        /// <param name="Bounce">The number of emails that bounced as undeliverable.</param>
        /// <param name="Open">The total number of times the emails were viewed.</param>
        /// <param name="Click">The total number of times links in the emails were clicked.</param>
        /// <param name="VideoPlay">The total number of times videos in the emails were played.</param>
        /// <param name="AbuseComplaints">The number of recipients that marked the message as abusive.</param>
        /// <param name="Contacts">The total number of contacts submitted to be sent, may be more than was sent to.</param>
        /// <param name="PromptsSent">The total number of prompts sent to members of the client group.</param>
        /// <param name="PromptsWithRecordings">The total number of prompts sent that included a personal recording.</param>
        /// <param name="PromptsOptedOut">The total number of members that chose not to send a prompt.</param>
        public JerichoPerformance(int? JerichoId = default(int?), int? Sent = default(int?), int? UniqueViews = default(int?), int? UniqueLandingPageViews = default(int?), int? LandingPageViews = default(int?), int? Delivered = default(int?), int? Bounce = default(int?), int? Open = default(int?), int? Click = default(int?), int? VideoPlay = default(int?), int? AbuseComplaints = default(int?), int? Contacts = default(int?), int? PromptsSent = default(int?), int? PromptsWithRecordings = default(int?), int? PromptsOptedOut = default(int?))
        {
            this.JerichoId = JerichoId;
            this.Sent = Sent;
            this.UniqueViews = UniqueViews;
            this.UniqueLandingPageViews = UniqueLandingPageViews;
            this.LandingPageViews = LandingPageViews;
            this.Delivered = Delivered;
            this.Bounce = Bounce;
            this.Open = Open;
            this.Click = Click;
            this.VideoPlay = VideoPlay;
            this.AbuseComplaints = AbuseComplaints;
            this.Contacts = Contacts;
            this.PromptsSent = PromptsSent;
            this.PromptsWithRecordings = PromptsWithRecordings;
            this.PromptsOptedOut = PromptsOptedOut;
        }
        
        /// <summary>
        /// The jericho id
        /// </summary>
        /// <value>The jericho id</value>
        [DataMember(Name="jerichoId", EmitDefaultValue=false)]
        public int? JerichoId { get; set; }

        /// <summary>
        /// The number of emails sent
        /// </summary>
        /// <value>The number of emails sent</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public int? Sent { get; set; }

        /// <summary>
        /// The unique number of people that viewed the email
        /// </summary>
        /// <value>The unique number of people that viewed the email</value>
        [DataMember(Name="uniqueViews", EmitDefaultValue=false)]
        public int? UniqueViews { get; set; }

        /// <summary>
        /// The unique number of people that visited the landing page
        /// </summary>
        /// <value>The unique number of people that visited the landing page</value>
        [DataMember(Name="uniqueLandingPageViews", EmitDefaultValue=false)]
        public int? UniqueLandingPageViews { get; set; }

        /// <summary>
        /// The total number of people that visisted the landing page
        /// </summary>
        /// <value>The total number of people that visisted the landing page</value>
        [DataMember(Name="landingPageViews", EmitDefaultValue=false)]
        public int? LandingPageViews { get; set; }

        /// <summary>
        /// The number of emails delivered, likely less than sent due to bounces, and other common delivery issues
        /// </summary>
        /// <value>The number of emails delivered, likely less than sent due to bounces, and other common delivery issues</value>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public int? Delivered { get; set; }

        /// <summary>
        /// The number of emails that bounced as undeliverable
        /// </summary>
        /// <value>The number of emails that bounced as undeliverable</value>
        [DataMember(Name="bounce", EmitDefaultValue=false)]
        public int? Bounce { get; set; }

        /// <summary>
        /// The total number of times the emails were viewed
        /// </summary>
        /// <value>The total number of times the emails were viewed</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public int? Open { get; set; }

        /// <summary>
        /// The total number of times links in the emails were clicked
        /// </summary>
        /// <value>The total number of times links in the emails were clicked</value>
        [DataMember(Name="click", EmitDefaultValue=false)]
        public int? Click { get; set; }

        /// <summary>
        /// The total number of times videos in the emails were played
        /// </summary>
        /// <value>The total number of times videos in the emails were played</value>
        [DataMember(Name="videoPlay", EmitDefaultValue=false)]
        public int? VideoPlay { get; set; }

        /// <summary>
        /// The number of recipients that marked the message as abusive
        /// </summary>
        /// <value>The number of recipients that marked the message as abusive</value>
        [DataMember(Name="abuseComplaints", EmitDefaultValue=false)]
        public int? AbuseComplaints { get; set; }

        /// <summary>
        /// The total number of contacts submitted to be sent, may be more than was sent to
        /// </summary>
        /// <value>The total number of contacts submitted to be sent, may be more than was sent to</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public int? Contacts { get; set; }

        /// <summary>
        /// The total number of prompts sent to members of the client group
        /// </summary>
        /// <value>The total number of prompts sent to members of the client group</value>
        [DataMember(Name="promptsSent", EmitDefaultValue=false)]
        public int? PromptsSent { get; set; }

        /// <summary>
        /// The total number of prompts sent that included a personal recording
        /// </summary>
        /// <value>The total number of prompts sent that included a personal recording</value>
        [DataMember(Name="promptsWithRecordings", EmitDefaultValue=false)]
        public int? PromptsWithRecordings { get; set; }

        /// <summary>
        /// The total number of members that chose not to send a prompt
        /// </summary>
        /// <value>The total number of members that chose not to send a prompt</value>
        [DataMember(Name="promptsOptedOut", EmitDefaultValue=false)]
        public int? PromptsOptedOut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JerichoPerformance {\n");
            sb.Append("  JerichoId: ").Append(JerichoId).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  UniqueViews: ").Append(UniqueViews).Append("\n");
            sb.Append("  UniqueLandingPageViews: ").Append(UniqueLandingPageViews).Append("\n");
            sb.Append("  LandingPageViews: ").Append(LandingPageViews).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Bounce: ").Append(Bounce).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Click: ").Append(Click).Append("\n");
            sb.Append("  VideoPlay: ").Append(VideoPlay).Append("\n");
            sb.Append("  AbuseComplaints: ").Append(AbuseComplaints).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  PromptsSent: ").Append(PromptsSent).Append("\n");
            sb.Append("  PromptsWithRecordings: ").Append(PromptsWithRecordings).Append("\n");
            sb.Append("  PromptsOptedOut: ").Append(PromptsOptedOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JerichoPerformance);
        }

        /// <summary>
        /// Returns true if JerichoPerformance instances are equal
        /// </summary>
        /// <param name="input">Instance of JerichoPerformance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JerichoPerformance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JerichoId == input.JerichoId ||
                    (this.JerichoId != null &&
                    this.JerichoId.Equals(input.JerichoId))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.UniqueViews == input.UniqueViews ||
                    (this.UniqueViews != null &&
                    this.UniqueViews.Equals(input.UniqueViews))
                ) && 
                (
                    this.UniqueLandingPageViews == input.UniqueLandingPageViews ||
                    (this.UniqueLandingPageViews != null &&
                    this.UniqueLandingPageViews.Equals(input.UniqueLandingPageViews))
                ) && 
                (
                    this.LandingPageViews == input.LandingPageViews ||
                    (this.LandingPageViews != null &&
                    this.LandingPageViews.Equals(input.LandingPageViews))
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.Bounce == input.Bounce ||
                    (this.Bounce != null &&
                    this.Bounce.Equals(input.Bounce))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.Click == input.Click ||
                    (this.Click != null &&
                    this.Click.Equals(input.Click))
                ) && 
                (
                    this.VideoPlay == input.VideoPlay ||
                    (this.VideoPlay != null &&
                    this.VideoPlay.Equals(input.VideoPlay))
                ) && 
                (
                    this.AbuseComplaints == input.AbuseComplaints ||
                    (this.AbuseComplaints != null &&
                    this.AbuseComplaints.Equals(input.AbuseComplaints))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    (this.Contacts != null &&
                    this.Contacts.Equals(input.Contacts))
                ) && 
                (
                    this.PromptsSent == input.PromptsSent ||
                    (this.PromptsSent != null &&
                    this.PromptsSent.Equals(input.PromptsSent))
                ) && 
                (
                    this.PromptsWithRecordings == input.PromptsWithRecordings ||
                    (this.PromptsWithRecordings != null &&
                    this.PromptsWithRecordings.Equals(input.PromptsWithRecordings))
                ) && 
                (
                    this.PromptsOptedOut == input.PromptsOptedOut ||
                    (this.PromptsOptedOut != null &&
                    this.PromptsOptedOut.Equals(input.PromptsOptedOut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JerichoId != null)
                    hashCode = hashCode * 59 + this.JerichoId.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.UniqueViews != null)
                    hashCode = hashCode * 59 + this.UniqueViews.GetHashCode();
                if (this.UniqueLandingPageViews != null)
                    hashCode = hashCode * 59 + this.UniqueLandingPageViews.GetHashCode();
                if (this.LandingPageViews != null)
                    hashCode = hashCode * 59 + this.LandingPageViews.GetHashCode();
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.Bounce != null)
                    hashCode = hashCode * 59 + this.Bounce.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.Click != null)
                    hashCode = hashCode * 59 + this.Click.GetHashCode();
                if (this.VideoPlay != null)
                    hashCode = hashCode * 59 + this.VideoPlay.GetHashCode();
                if (this.AbuseComplaints != null)
                    hashCode = hashCode * 59 + this.AbuseComplaints.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.PromptsSent != null)
                    hashCode = hashCode * 59 + this.PromptsSent.GetHashCode();
                if (this.PromptsWithRecordings != null)
                    hashCode = hashCode * 59 + this.PromptsWithRecordings.GetHashCode();
                if (this.PromptsOptedOut != null)
                    hashCode = hashCode * 59 + this.PromptsOptedOut.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
