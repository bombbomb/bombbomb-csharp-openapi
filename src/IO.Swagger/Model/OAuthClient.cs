/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OAuthClient
    /// </summary>
    [DataContract]
    public partial class OAuthClient :  IEquatable<OAuthClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClient" /> class.
        /// </summary>
        /// <param name="Name">The user-facing name of the client. Eg. MyCrm.</param>
        /// <param name="ClientSecret">The secret supplied to the OAuth Application.</param>
        /// <param name="GrantsAllowed">The grants allowed.</param>
        /// <param name="OwningUserId">The user who controls the OAuth App.</param>
        /// <param name="RedirectUri">Where OAuth authorization sessions are returned to.</param>
        public OAuthClient(string Name = default(string), string ClientSecret = default(string), string GrantsAllowed = default(string), string OwningUserId = default(string), string RedirectUri = default(string))
        {
            this.Name = Name;
            this.ClientSecret = ClientSecret;
            this.GrantsAllowed = GrantsAllowed;
            this.OwningUserId = OwningUserId;
            this.RedirectUri = RedirectUri;
        }
        
        /// <summary>
        /// The id of the OAuth Client
        /// </summary>
        /// <value>The id of the OAuth Client</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; private set; }

        /// <summary>
        /// The user-facing name of the client. Eg. MyCrm
        /// </summary>
        /// <value>The user-facing name of the client. Eg. MyCrm</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The secret supplied to the OAuth Application
        /// </summary>
        /// <value>The secret supplied to the OAuth Application</value>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// The grants allowed
        /// </summary>
        /// <value>The grants allowed</value>
        [DataMember(Name="grantsAllowed", EmitDefaultValue=false)]
        public string GrantsAllowed { get; set; }

        /// <summary>
        /// The user who controls the OAuth App
        /// </summary>
        /// <value>The user who controls the OAuth App</value>
        [DataMember(Name="owningUserId", EmitDefaultValue=false)]
        public string OwningUserId { get; set; }

        /// <summary>
        /// Where OAuth authorization sessions are returned to
        /// </summary>
        /// <value>Where OAuth authorization sessions are returned to</value>
        [DataMember(Name="redirectUri", EmitDefaultValue=false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OAuthClient {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  GrantsAllowed: ").Append(GrantsAllowed).Append("\n");
            sb.Append("  OwningUserId: ").Append(OwningUserId).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthClient);
        }

        /// <summary>
        /// Returns true if OAuthClient instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthClient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.GrantsAllowed == input.GrantsAllowed ||
                    (this.GrantsAllowed != null &&
                    this.GrantsAllowed.Equals(input.GrantsAllowed))
                ) && 
                (
                    this.OwningUserId == input.OwningUserId ||
                    (this.OwningUserId != null &&
                    this.OwningUserId.Equals(input.OwningUserId))
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.GrantsAllowed != null)
                    hashCode = hashCode * 59 + this.GrantsAllowed.GetHashCode();
                if (this.OwningUserId != null)
                    hashCode = hashCode * 59 + this.OwningUserId.GetHashCode();
                if (this.RedirectUri != null)
                    hashCode = hashCode * 59 + this.RedirectUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
