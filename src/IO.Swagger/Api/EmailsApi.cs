/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns></returns>
        void CreatePrintingPressEmail (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null);

        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePrintingPressEmailWithHttpInfo (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null);
        /// <summary>
        /// Get all user templates
        /// </summary>
        /// <remarks>
        /// Get all templates accessible to the current user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns></returns>
        void GetAllTemplatesForCurrentUser (bool? quickSendOnly = null);

        /// <summary>
        /// Get all user templates
        /// </summary>
        /// <remarks>
        /// Get all templates accessible to the current user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAllTemplatesForCurrentUserWithHttpInfo (bool? quickSendOnly = null);
        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns></returns>
        void GetEmailTracking (string emailId, string jobId = null);

        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEmailTrackingWithHttpInfo (string emailId, string jobId = null);
        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns></returns>
        void GetEmailTrackingInteractions (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);

        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEmailTrackingInteractionsWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);
        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns></returns>
        void GetHourlyEmailTracking (string emailId, string jobId = null, string interactionType = null);

        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetHourlyEmailTrackingWithHttpInfo (string emailId, string jobId = null, string interactionType = null);
        /// <summary>
        /// Get livefire feed data
        /// </summary>
        /// <remarks>
        /// Get the user data for the live fire feed emails
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetLiveFireData ();

        /// <summary>
        /// Get livefire feed data
        /// </summary>
        /// <remarks>
        /// Get the user data for the live fire feed emails
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLiveFireDataWithHttpInfo ();
        /// <summary>
        /// Get all quicksend templates
        /// </summary>
        /// <remarks>
        /// Get all quicksend templates accessible to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetQuickSendTemplates ();

        /// <summary>
        /// Get all quicksend templates
        /// </summary>
        /// <remarks>
        /// Get all quicksend templates accessible to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetQuickSendTemplatesWithHttpInfo ();
        /// <summary>
        /// Get the HTML for a given template
        /// </summary>
        /// <remarks>
        /// Get the HTML for a given template, with or without rendered variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns></returns>
        void GetTemplateHtmlForTemplateId (string templateId, string renderVariables = null);

        /// <summary>
        /// Get the HTML for a given template
        /// </summary>
        /// <remarks>
        /// Get the HTML for a given template, with or without rendered variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTemplateHtmlForTemplateIdWithHttpInfo (string templateId, string renderVariables = null);
        /// <summary>
        /// Get quicksend data
        /// </summary>
        /// <remarks>
        /// Get the user data for quicksender, including templates and lists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns></returns>
        void GetVideoQuickSenderData (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null);

        /// <summary>
        /// Get quicksend data
        /// </summary>
        /// <remarks>
        /// Get the user data for quicksender, including templates and lists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetVideoQuickSenderDataWithHttpInfo (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null);
        /// <summary>
        /// Save quicksender settings
        /// </summary>
        /// <remarks>
        /// Save the quicksender notification and default template settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns></returns>
        void SaveQuickSenderSettings (string alertOnPlay = null, string alertOnOpen = null, string templateId = null);

        /// <summary>
        /// Save quicksender settings
        /// </summary>
        /// <remarks>
        /// Save the quicksender notification and default template settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveQuickSenderSettingsWithHttpInfo (string alertOnPlay = null, string alertOnOpen = null, string templateId = null);
        /// <summary>
        /// Send a quicksend email
        /// </summary>
        /// <remarks>
        /// Send a quicksend video email to the list or users provided.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns></returns>
        void VideoQuickSender (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null);

        /// <summary>
        /// Send a quicksend email
        /// </summary>
        /// <remarks>
        /// Send a quicksend video email to the list or users provided.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VideoQuickSenderWithHttpInfo (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePrintingPressEmailAsync (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null);

        /// <summary>
        /// Create an Email with Printing Press
        /// </summary>
        /// <remarks>
        /// Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrintingPressEmailAsyncWithHttpInfo (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null);
        /// <summary>
        /// Get all user templates
        /// </summary>
        /// <remarks>
        /// Get all templates accessible to the current user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAllTemplatesForCurrentUserAsync (bool? quickSendOnly = null);

        /// <summary>
        /// Get all user templates
        /// </summary>
        /// <remarks>
        /// Get all templates accessible to the current user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAllTemplatesForCurrentUserAsyncWithHttpInfo (bool? quickSendOnly = null);
        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEmailTrackingAsync (string emailId, string jobId = null);

        /// <summary>
        /// Get Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for all sends of an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null);
        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEmailTrackingInteractionsAsync (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);

        /// <summary>
        /// Get Email Tracking Interactions
        /// </summary>
        /// <remarks>
        /// Get Contact detail interactions for an Email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingInteractionsAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null);
        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetHourlyEmailTrackingAsync (string emailId, string jobId = null, string interactionType = null);

        /// <summary>
        /// Get Hourly Email Tracking
        /// </summary>
        /// <remarks>
        /// Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHourlyEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null);
        /// <summary>
        /// Get livefire feed data
        /// </summary>
        /// <remarks>
        /// Get the user data for the live fire feed emails
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLiveFireDataAsync ();

        /// <summary>
        /// Get livefire feed data
        /// </summary>
        /// <remarks>
        /// Get the user data for the live fire feed emails
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveFireDataAsyncWithHttpInfo ();
        /// <summary>
        /// Get all quicksend templates
        /// </summary>
        /// <remarks>
        /// Get all quicksend templates accessible to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetQuickSendTemplatesAsync ();

        /// <summary>
        /// Get all quicksend templates
        /// </summary>
        /// <remarks>
        /// Get all quicksend templates accessible to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickSendTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// Get the HTML for a given template
        /// </summary>
        /// <remarks>
        /// Get the HTML for a given template, with or without rendered variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetTemplateHtmlForTemplateIdAsync (string templateId, string renderVariables = null);

        /// <summary>
        /// Get the HTML for a given template
        /// </summary>
        /// <remarks>
        /// Get the HTML for a given template, with or without rendered variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTemplateHtmlForTemplateIdAsyncWithHttpInfo (string templateId, string renderVariables = null);
        /// <summary>
        /// Get quicksend data
        /// </summary>
        /// <remarks>
        /// Get the user data for quicksender, including templates and lists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetVideoQuickSenderDataAsync (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null);

        /// <summary>
        /// Get quicksend data
        /// </summary>
        /// <remarks>
        /// Get the user data for quicksender, including templates and lists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetVideoQuickSenderDataAsyncWithHttpInfo (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null);
        /// <summary>
        /// Save quicksender settings
        /// </summary>
        /// <remarks>
        /// Save the quicksender notification and default template settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveQuickSenderSettingsAsync (string alertOnPlay = null, string alertOnOpen = null, string templateId = null);

        /// <summary>
        /// Save quicksender settings
        /// </summary>
        /// <remarks>
        /// Save the quicksender notification and default template settings
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveQuickSenderSettingsAsyncWithHttpInfo (string alertOnPlay = null, string alertOnOpen = null, string templateId = null);
        /// <summary>
        /// Send a quicksend email
        /// </summary>
        /// <remarks>
        /// Send a quicksend video email to the list or users provided.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VideoQuickSenderAsync (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null);

        /// <summary>
        /// Send a quicksend email
        /// </summary>
        /// <remarks>
        /// Send a quicksend video email to the list or users provided.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VideoQuickSenderAsyncWithHttpInfo (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailsApi : IEmailsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns></returns>
        public void CreatePrintingPressEmail (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null)
        {
             CreatePrintingPressEmailWithHttpInfo(templateId, content, emailId, videoId, subjectLine);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePrintingPressEmailWithHttpInfo (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling EmailsApi->CreatePrintingPressEmail");

            var localVarPath = "/emails/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (subjectLine != null) localVarFormParams.Add("subjectLine", Configuration.ApiClient.ParameterToString(subjectLine)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrintingPressEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePrintingPressEmailAsync (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null)
        {
             await CreatePrintingPressEmailAsyncWithHttpInfo(templateId, content, emailId, videoId, subjectLine);

        }

        /// <summary>
        /// Create an Email with Printing Press Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id to be printed.</param>
        /// <param name="content">The content of the email.</param>
        /// <param name="emailId">The email id to be printed to. (optional)</param>
        /// <param name="videoId">A video to replace video place holders with. (optional)</param>
        /// <param name="subjectLine">The subject line to be printed. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrintingPressEmailAsyncWithHttpInfo (string templateId, string content, string emailId = null, string videoId = null, string subjectLine = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->CreatePrintingPressEmail");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling EmailsApi->CreatePrintingPressEmail");

            var localVarPath = "/emails/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter
            if (emailId != null) localVarFormParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (subjectLine != null) localVarFormParams.Add("subjectLine", Configuration.ApiClient.ParameterToString(subjectLine)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrintingPressEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all user templates Get all templates accessible to the current user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns></returns>
        public void GetAllTemplatesForCurrentUser (bool? quickSendOnly = null)
        {
             GetAllTemplatesForCurrentUserWithHttpInfo(quickSendOnly);
        }

        /// <summary>
        /// Get all user templates Get all templates accessible to the current user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAllTemplatesForCurrentUserWithHttpInfo (bool? quickSendOnly = null)
        {

            var localVarPath = "/emails/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSendOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "quickSendOnly", quickSendOnly)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplatesForCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all user templates Get all templates accessible to the current user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAllTemplatesForCurrentUserAsync (bool? quickSendOnly = null)
        {
             await GetAllTemplatesForCurrentUserAsyncWithHttpInfo(quickSendOnly);

        }

        /// <summary>
        /// Get all user templates Get all templates accessible to the current user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSendOnly">Whether to return only quick send templates. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAllTemplatesForCurrentUserAsyncWithHttpInfo (bool? quickSendOnly = null)
        {

            var localVarPath = "/emails/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSendOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "quickSendOnly", quickSendOnly)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplatesForCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns></returns>
        public void GetEmailTracking (string emailId, string jobId = null)
        {
             GetEmailTrackingWithHttpInfo(emailId, jobId);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEmailTrackingWithHttpInfo (string emailId, string jobId = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEmailTrackingAsync (string emailId, string jobId = null)
        {
             await GetEmailTrackingAsyncWithHttpInfo(emailId, jobId);

        }

        /// <summary>
        /// Get Email Tracking Get Tracking data for all sends of an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns></returns>
        public void GetEmailTrackingInteractions (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
             GetEmailTrackingInteractionsWithHttpInfo(emailId, jobId, interactionType, searchTerm);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEmailTrackingInteractionsWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTrackingInteractions");

            var localVarPath = "/emails/{emailId}/tracking/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interactionType", interactionType)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTrackingInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEmailTrackingInteractionsAsync (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
             await GetEmailTrackingInteractionsAsyncWithHttpInfo(emailId, jobId, interactionType, searchTerm);

        }

        /// <summary>
        /// Get Email Tracking Interactions Get Contact detail interactions for an Email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to order and filter by (optional)</param>
        /// <param name="searchTerm">Search term to filer by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailTrackingInteractionsAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null, string searchTerm = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetEmailTrackingInteractions");

            var localVarPath = "/emails/{emailId}/tracking/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interactionType", interactionType)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTrackingInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns></returns>
        public void GetHourlyEmailTracking (string emailId, string jobId = null, string interactionType = null)
        {
             GetHourlyEmailTrackingWithHttpInfo(emailId, jobId, interactionType);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetHourlyEmailTrackingWithHttpInfo (string emailId, string jobId = null, string interactionType = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetHourlyEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interactionType", interactionType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHourlyEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetHourlyEmailTrackingAsync (string emailId, string jobId = null, string interactionType = null)
        {
             await GetHourlyEmailTrackingAsyncWithHttpInfo(emailId, jobId, interactionType);

        }

        /// <summary>
        /// Get Hourly Email Tracking Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email</param>
        /// <param name="jobId">ID of the Job (or null for all jobs) (optional)</param>
        /// <param name="interactionType">Interaction type to filter by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHourlyEmailTrackingAsyncWithHttpInfo (string emailId, string jobId = null, string interactionType = null)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailsApi->GetHourlyEmailTracking");

            var localVarPath = "/emails/{emailId}/tracking/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (jobId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (interactionType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interactionType", interactionType)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHourlyEmailTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get livefire feed data Get the user data for the live fire feed emails
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetLiveFireData ()
        {
             GetLiveFireDataWithHttpInfo();
        }

        /// <summary>
        /// Get livefire feed data Get the user data for the live fire feed emails
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLiveFireDataWithHttpInfo ()
        {

            var localVarPath = "/emails/livefire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveFireData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get livefire feed data Get the user data for the live fire feed emails
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLiveFireDataAsync ()
        {
             await GetLiveFireDataAsyncWithHttpInfo();

        }

        /// <summary>
        /// Get livefire feed data Get the user data for the live fire feed emails
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLiveFireDataAsyncWithHttpInfo ()
        {

            var localVarPath = "/emails/livefire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveFireData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all quicksend templates Get all quicksend templates accessible to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetQuickSendTemplates ()
        {
             GetQuickSendTemplatesWithHttpInfo();
        }

        /// <summary>
        /// Get all quicksend templates Get all quicksend templates accessible to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetQuickSendTemplatesWithHttpInfo ()
        {

            var localVarPath = "/emails/quicksend/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickSendTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all quicksend templates Get all quicksend templates accessible to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetQuickSendTemplatesAsync ()
        {
             await GetQuickSendTemplatesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Get all quicksend templates Get all quicksend templates accessible to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickSendTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/emails/quicksend/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickSendTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the HTML for a given template Get the HTML for a given template, with or without rendered variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns></returns>
        public void GetTemplateHtmlForTemplateId (string templateId, string renderVariables = null)
        {
             GetTemplateHtmlForTemplateIdWithHttpInfo(templateId, renderVariables);
        }

        /// <summary>
        /// Get the HTML for a given template Get the HTML for a given template, with or without rendered variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetTemplateHtmlForTemplateIdWithHttpInfo (string templateId, string renderVariables = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->GetTemplateHtmlForTemplateId");

            var localVarPath = "/emails/templates/{templateId}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (renderVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "renderVariables", renderVariables)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHtmlForTemplateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the HTML for a given template Get the HTML for a given template, with or without rendered variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetTemplateHtmlForTemplateIdAsync (string templateId, string renderVariables = null)
        {
             await GetTemplateHtmlForTemplateIdAsyncWithHttpInfo(templateId, renderVariables);

        }

        /// <summary>
        /// Get the HTML for a given template Get the HTML for a given template, with or without rendered variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template.</param>
        /// <param name="renderVariables">Whether to render profile variables in the returned HTML. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTemplateHtmlForTemplateIdAsyncWithHttpInfo (string templateId, string renderVariables = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling EmailsApi->GetTemplateHtmlForTemplateId");

            var localVarPath = "/emails/templates/{templateId}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (renderVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "renderVariables", renderVariables)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHtmlForTemplateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get quicksend data Get the user data for quicksender, including templates and lists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns></returns>
        public void GetVideoQuickSenderData (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null)
        {
             GetVideoQuickSenderDataWithHttpInfo(message, subject, videoId, templateId, commaDelimEmails);
        }

        /// <summary>
        /// Get quicksend data Get the user data for quicksender, including templates and lists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetVideoQuickSenderDataWithHttpInfo (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null)
        {

            var localVarPath = "/emails/quicksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (message != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (videoId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "videoId", videoId)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (commaDelimEmails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "commaDelimEmails", commaDelimEmails)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoQuickSenderData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get quicksend data Get the user data for quicksender, including templates and lists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetVideoQuickSenderDataAsync (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null)
        {
             await GetVideoQuickSenderDataAsyncWithHttpInfo(message, subject, videoId, templateId, commaDelimEmails);

        }

        /// <summary>
        /// Get quicksend data Get the user data for quicksender, including templates and lists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message">A message for the video content. (optional)</param>
        /// <param name="subject">A subject for the video content. (optional)</param>
        /// <param name="videoId">A video ID. (optional)</param>
        /// <param name="templateId">A template ID. (optional)</param>
        /// <param name="commaDelimEmails">Comma delimited emails (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetVideoQuickSenderDataAsyncWithHttpInfo (string message = null, string subject = null, string videoId = null, string templateId = null, string commaDelimEmails = null)
        {

            var localVarPath = "/emails/quicksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (message != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (videoId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "videoId", videoId)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (commaDelimEmails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "commaDelimEmails", commaDelimEmails)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoQuickSenderData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Save quicksender settings Save the quicksender notification and default template settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns></returns>
        public void SaveQuickSenderSettings (string alertOnPlay = null, string alertOnOpen = null, string templateId = null)
        {
             SaveQuickSenderSettingsWithHttpInfo(alertOnPlay, alertOnOpen, templateId);
        }

        /// <summary>
        /// Save quicksender settings Save the quicksender notification and default template settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveQuickSenderSettingsWithHttpInfo (string alertOnPlay = null, string alertOnOpen = null, string templateId = null)
        {

            var localVarPath = "/emails/quicksend/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alertOnPlay != null) localVarFormParams.Add("alertOnPlay", Configuration.ApiClient.ParameterToString(alertOnPlay)); // form parameter
            if (alertOnOpen != null) localVarFormParams.Add("alertOnOpen", Configuration.ApiClient.ParameterToString(alertOnOpen)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveQuickSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Save quicksender settings Save the quicksender notification and default template settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveQuickSenderSettingsAsync (string alertOnPlay = null, string alertOnOpen = null, string templateId = null)
        {
             await SaveQuickSenderSettingsAsyncWithHttpInfo(alertOnPlay, alertOnOpen, templateId);

        }

        /// <summary>
        /// Save quicksender settings Save the quicksender notification and default template settings
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertOnPlay">A preference setting for whether or not to notify user on quicksend email video plays. (optional)</param>
        /// <param name="alertOnOpen">A preference setting for whether or not to notify user on quicksend email opens. (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveQuickSenderSettingsAsyncWithHttpInfo (string alertOnPlay = null, string alertOnOpen = null, string templateId = null)
        {

            var localVarPath = "/emails/quicksend/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alertOnPlay != null) localVarFormParams.Add("alertOnPlay", Configuration.ApiClient.ParameterToString(alertOnPlay)); // form parameter
            if (alertOnOpen != null) localVarFormParams.Add("alertOnOpen", Configuration.ApiClient.ParameterToString(alertOnOpen)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveQuickSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a quicksend email Send a quicksend video email to the list or users provided.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns></returns>
        public void VideoQuickSender (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null)
        {
             VideoQuickSenderWithHttpInfo(videoId, emailAddresses, subject, message, listIds, scheduledSendTimestamp, extendedProperties, templateId, stripHTML);
        }

        /// <summary>
        /// Send a quicksend email Send a quicksend video email to the list or users provided.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VideoQuickSenderWithHttpInfo (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null)
        {

            var localVarPath = "/emails/quicksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (emailAddresses != null) localVarFormParams.Add("emailAddresses", Configuration.ApiClient.ParameterToString(emailAddresses)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (listIds != null) localVarFormParams.Add("listIds", Configuration.ApiClient.ParameterToString(listIds)); // form parameter
            if (scheduledSendTimestamp != null) localVarFormParams.Add("scheduledSendTimestamp", Configuration.ApiClient.ParameterToString(scheduledSendTimestamp)); // form parameter
            if (extendedProperties != null) localVarFormParams.Add("extendedProperties", Configuration.ApiClient.ParameterToString(extendedProperties)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (stripHTML != null) localVarFormParams.Add("stripHTML", Configuration.ApiClient.ParameterToString(stripHTML)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoQuickSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a quicksend email Send a quicksend video email to the list or users provided.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VideoQuickSenderAsync (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null)
        {
             await VideoQuickSenderAsyncWithHttpInfo(videoId, emailAddresses, subject, message, listIds, scheduledSendTimestamp, extendedProperties, templateId, stripHTML);

        }

        /// <summary>
        /// Send a quicksend email Send a quicksend video email to the list or users provided.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">A guid id for the video. (optional)</param>
        /// <param name="emailAddresses">A semi-colon separated list of email addresses to send to. (optional)</param>
        /// <param name="subject">Subject line for the email. (optional)</param>
        /// <param name="message">Message for the body of the email. (optional)</param>
        /// <param name="listIds">An array of list ids (optional)</param>
        /// <param name="scheduledSendTimestamp">When to schedule the send (seconds since epoch). null value means send immediately. (optional)</param>
        /// <param name="extendedProperties">Bool value that when checked will send back both emailId as well as extra properties (optional)</param>
        /// <param name="templateId">Id of a template to use for this send. A null value means use the default for this user. (optional)</param>
        /// <param name="stripHTML">remove HTML elements (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VideoQuickSenderAsyncWithHttpInfo (string videoId = null, string emailAddresses = null, string subject = null, string message = null, string listIds = null, int? scheduledSendTimestamp = null, string extendedProperties = null, string templateId = null, string stripHTML = null)
        {

            var localVarPath = "/emails/quicksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (videoId != null) localVarFormParams.Add("videoId", Configuration.ApiClient.ParameterToString(videoId)); // form parameter
            if (emailAddresses != null) localVarFormParams.Add("emailAddresses", Configuration.ApiClient.ParameterToString(emailAddresses)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (listIds != null) localVarFormParams.Add("listIds", Configuration.ApiClient.ParameterToString(listIds)); // form parameter
            if (scheduledSendTimestamp != null) localVarFormParams.Add("scheduledSendTimestamp", Configuration.ApiClient.ParameterToString(scheduledSendTimestamp)); // form parameter
            if (extendedProperties != null) localVarFormParams.Add("extendedProperties", Configuration.ApiClient.ParameterToString(extendedProperties)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (stripHTML != null) localVarFormParams.Add("stripHTML", Configuration.ApiClient.ParameterToString(stripHTML)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoQuickSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
