/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get account details.
        /// </summary>
        /// <remarks>
        /// Get the details of the user&#39;s account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AccountDetails ();

        /// <summary>
        /// Get account details.
        /// </summary>
        /// <remarks>
        /// Get the details of the user&#39;s account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AccountDetailsWithHttpInfo ();
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>string</returns>
        string CreateAccount (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null);

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateAccountWithHttpInfo (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null);
        /// <summary>
        /// Get Client Statistics
        /// </summary>
        /// <remarks>
        /// Gets general statics for a Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns></returns>
        void GetClientStatistics (string clientId = null, bool? refresh = null, string statisticValues = null);

        /// <summary>
        /// Get Client Statistics
        /// </summary>
        /// <remarks>
        /// Gets general statics for a Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetClientStatisticsWithHttpInfo (string clientId = null, bool? refresh = null, string statisticValues = null);
        /// <summary>
        /// Gets user country
        /// </summary>
        /// <remarks>
        /// Gets the users country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetUserCountry ();

        /// <summary>
        /// Gets user country
        /// </summary>
        /// <remarks>
        /// Gets the users country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserCountryWithHttpInfo ();
        /// <summary>
        /// Reset API key
        /// </summary>
        /// <remarks>
        /// Resets the current user&#39;s API key and returns the new key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ResetApiKey ();

        /// <summary>
        /// Reset API key
        /// </summary>
        /// <remarks>
        /// Resets the current user&#39;s API key and returns the new key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetApiKeyWithHttpInfo ();
        /// <summary>
        /// Check if subscription purchase allowed.
        /// </summary>
        /// <remarks>
        /// Check whether the user can purchase a subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SubscriptionPurchaseAllowed ();

        /// <summary>
        /// Check if subscription purchase allowed.
        /// </summary>
        /// <remarks>
        /// Check whether the user can purchase a subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionPurchaseAllowedWithHttpInfo ();
        /// <summary>
        /// Add profile information.
        /// </summary>
        /// <remarks>
        /// Add profile information to this users account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns></returns>
        void UpdateProfileData (string profileData = null);

        /// <summary>
        /// Add profile information.
        /// </summary>
        /// <remarks>
        /// Add profile information to this users account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProfileDataWithHttpInfo (string profileData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get account details.
        /// </summary>
        /// <remarks>
        /// Get the details of the user&#39;s account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AccountDetailsAsync ();

        /// <summary>
        /// Get account details.
        /// </summary>
        /// <remarks>
        /// Get the details of the user&#39;s account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountDetailsAsyncWithHttpInfo ();
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateAccountAsync (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null);

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateAccountAsyncWithHttpInfo (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null);
        /// <summary>
        /// Get Client Statistics
        /// </summary>
        /// <remarks>
        /// Gets general statics for a Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetClientStatisticsAsync (string clientId = null, bool? refresh = null, string statisticValues = null);

        /// <summary>
        /// Get Client Statistics
        /// </summary>
        /// <remarks>
        /// Gets general statics for a Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientStatisticsAsyncWithHttpInfo (string clientId = null, bool? refresh = null, string statisticValues = null);
        /// <summary>
        /// Gets user country
        /// </summary>
        /// <remarks>
        /// Gets the users country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserCountryAsync ();

        /// <summary>
        /// Gets user country
        /// </summary>
        /// <remarks>
        /// Gets the users country
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserCountryAsyncWithHttpInfo ();
        /// <summary>
        /// Reset API key
        /// </summary>
        /// <remarks>
        /// Resets the current user&#39;s API key and returns the new key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetApiKeyAsync ();

        /// <summary>
        /// Reset API key
        /// </summary>
        /// <remarks>
        /// Resets the current user&#39;s API key and returns the new key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetApiKeyAsyncWithHttpInfo ();
        /// <summary>
        /// Check if subscription purchase allowed.
        /// </summary>
        /// <remarks>
        /// Check whether the user can purchase a subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionPurchaseAllowedAsync ();

        /// <summary>
        /// Check if subscription purchase allowed.
        /// </summary>
        /// <remarks>
        /// Check whether the user can purchase a subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionPurchaseAllowedAsyncWithHttpInfo ();
        /// <summary>
        /// Add profile information.
        /// </summary>
        /// <remarks>
        /// Add profile information to this users account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProfileDataAsync (string profileData = null);

        /// <summary>
        /// Add profile information.
        /// </summary>
        /// <remarks>
        /// Add profile information to this users account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProfileDataAsyncWithHttpInfo (string profileData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get account details. Get the details of the user&#39;s account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AccountDetails ()
        {
             AccountDetailsWithHttpInfo();
        }

        /// <summary>
        /// Get account details. Get the details of the user&#39;s account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AccountDetailsWithHttpInfo ()
        {

            var localVarPath = "/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get account details. Get the details of the user&#39;s account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AccountDetailsAsync ()
        {
             await AccountDetailsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Get account details. Get the details of the user&#39;s account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountDetailsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Account Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>string</returns>
        public string CreateAccount (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null)
        {
             ApiResponse<string> localVarResponse = CreateAccountWithHttpInfo(teamId, firstName, lastName, emailAddress, companyName, phone, country, industry, address, city, postalCode, preventWelcomeEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateAccountWithHttpInfo (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
                throw new ApiException(400, "Missing required parameter 'emailAddress' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'companyName' is set
            if (companyName == null)
                throw new ApiException(400, "Missing required parameter 'companyName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AccountsApi->CreateAccount");

            var localVarPath = "/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (emailAddress != null) localVarFormParams.Add("emailAddress", Configuration.ApiClient.ParameterToString(emailAddress)); // form parameter
            if (companyName != null) localVarFormParams.Add("companyName", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (country != null) localVarFormParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (industry != null) localVarFormParams.Add("industry", Configuration.ApiClient.ParameterToString(industry)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (preventWelcomeEmail != null) localVarFormParams.Add("preventWelcomeEmail", Configuration.ApiClient.ParameterToString(preventWelcomeEmail)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Account Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateAccountAsync (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null)
        {
             ApiResponse<string> localVarResponse = await CreateAccountAsyncWithHttpInfo(teamId, firstName, lastName, emailAddress, companyName, phone, country, industry, address, city, postalCode, preventWelcomeEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Account Creates a new BombBomb account. This method is currently only available to paid seat admins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id</param>
        /// <param name="firstName">First name of the user.</param>
        /// <param name="lastName">Last name of the user.</param>
        /// <param name="emailAddress">Email address of the user.</param>
        /// <param name="companyName">Company of the user.</param>
        /// <param name="phone">Phone number of the user.</param>
        /// <param name="country">Country of the user. (optional)</param>
        /// <param name="industry">Industry of the user. (optional)</param>
        /// <param name="address">Street Address of the user. (optional)</param>
        /// <param name="city">City of the user. (optional)</param>
        /// <param name="postalCode">Postal/Zip code of the user. (optional)</param>
        /// <param name="preventWelcomeEmail">prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateAccountAsyncWithHttpInfo (string teamId, string firstName, string lastName, string emailAddress, string companyName, string phone, string country = null, string industry = null, string address = null, string city = null, string postalCode = null, bool? preventWelcomeEmail = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
                throw new ApiException(400, "Missing required parameter 'emailAddress' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'companyName' is set
            if (companyName == null)
                throw new ApiException(400, "Missing required parameter 'companyName' when calling AccountsApi->CreateAccount");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AccountsApi->CreateAccount");

            var localVarPath = "/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (emailAddress != null) localVarFormParams.Add("emailAddress", Configuration.ApiClient.ParameterToString(emailAddress)); // form parameter
            if (companyName != null) localVarFormParams.Add("companyName", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (country != null) localVarFormParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (industry != null) localVarFormParams.Add("industry", Configuration.ApiClient.ParameterToString(industry)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (preventWelcomeEmail != null) localVarFormParams.Add("preventWelcomeEmail", Configuration.ApiClient.ParameterToString(preventWelcomeEmail)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Client Statistics Gets general statics for a Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns></returns>
        public void GetClientStatistics (string clientId = null, bool? refresh = null, string statisticValues = null)
        {
             GetClientStatisticsWithHttpInfo(clientId, refresh, statisticValues);
        }

        /// <summary>
        /// Get Client Statistics Gets general statics for a Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetClientStatisticsWithHttpInfo (string clientId = null, bool? refresh = null, string statisticValues = null)
        {

            var localVarPath = "/accounts/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (refresh != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refresh", refresh)); // query parameter
            if (statisticValues != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticValues", statisticValues)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Client Statistics Gets general statics for a Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetClientStatisticsAsync (string clientId = null, bool? refresh = null, string statisticValues = null)
        {
             await GetClientStatisticsAsyncWithHttpInfo(clientId, refresh, statisticValues);

        }

        /// <summary>
        /// Get Client Statistics Gets general statics for a Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID of the account to retrieve. Defaults to yourself. (optional)</param>
        /// <param name="refresh">Boolean for whether data returned should be from cache or not. (optional)</param>
        /// <param name="statisticValues">Array of data that should be returned, used exclusively for cacheless data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetClientStatisticsAsyncWithHttpInfo (string clientId = null, bool? refresh = null, string statisticValues = null)
        {

            var localVarPath = "/accounts/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (refresh != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refresh", refresh)); // query parameter
            if (statisticValues != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticValues", statisticValues)); // query parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets user country Gets the users country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetUserCountry ()
        {
             GetUserCountryWithHttpInfo();
        }

        /// <summary>
        /// Gets user country Gets the users country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUserCountryWithHttpInfo ()
        {

            var localVarPath = "/accounts/{clientId}/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets user country Gets the users country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserCountryAsync ()
        {
             await GetUserCountryAsyncWithHttpInfo();

        }

        /// <summary>
        /// Gets user country Gets the users country
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUserCountryAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/{clientId}/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset API key Resets the current user&#39;s API key and returns the new key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ResetApiKey ()
        {
             ResetApiKeyWithHttpInfo();
        }

        /// <summary>
        /// Reset API key Resets the current user&#39;s API key and returns the new key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetApiKeyWithHttpInfo ()
        {

            var localVarPath = "/accounts/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset API key Resets the current user&#39;s API key and returns the new key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetApiKeyAsync ()
        {
             await ResetApiKeyAsyncWithHttpInfo();

        }

        /// <summary>
        /// Reset API key Resets the current user&#39;s API key and returns the new key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetApiKeyAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check if subscription purchase allowed. Check whether the user can purchase a subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SubscriptionPurchaseAllowed ()
        {
             SubscriptionPurchaseAllowedWithHttpInfo();
        }

        /// <summary>
        /// Check if subscription purchase allowed. Check whether the user can purchase a subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubscriptionPurchaseAllowedWithHttpInfo ()
        {

            var localVarPath = "/accounts/purchaseable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionPurchaseAllowed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check if subscription purchase allowed. Check whether the user can purchase a subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionPurchaseAllowedAsync ()
        {
             await SubscriptionPurchaseAllowedAsyncWithHttpInfo();

        }

        /// <summary>
        /// Check if subscription purchase allowed. Check whether the user can purchase a subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionPurchaseAllowedAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/purchaseable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionPurchaseAllowed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add profile information. Add profile information to this users account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns></returns>
        public void UpdateProfileData (string profileData = null)
        {
             UpdateProfileDataWithHttpInfo(profileData);
        }

        /// <summary>
        /// Add profile information. Add profile information to this users account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProfileDataWithHttpInfo (string profileData = null)
        {

            var localVarPath = "/account/profile/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileData != null) localVarFormParams.Add("profileData", Configuration.ApiClient.ParameterToString(profileData)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfileData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add profile information. Add profile information to this users account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProfileDataAsync (string profileData = null)
        {
             await UpdateProfileDataAsyncWithHttpInfo(profileData);

        }

        /// <summary>
        /// Add profile information. Add profile information to this users account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileData">Profile field information for the account (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProfileDataAsyncWithHttpInfo (string profileData = null)
        {

            var localVarPath = "/account/profile/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileData != null) localVarFormParams.Add("profileData", Configuration.ApiClient.ParameterToString(profileData)); // form parameter

            // authentication (BBOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfileData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
