/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Curriculum class
    /// </summary>
    [DataContract]
    public partial class Curriculum :  IEquatable<Curriculum>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Curriculum" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="HtmlIntro">HTML formatted intro.</param>
        /// <param name="ImgUrl">URI of header image.</param>
        /// <param name="ItemCount">Number of curriculum items.</param>
        /// <param name="RenderAs">Render method for curriculum.</param>
        /// <param name="VisibleToAllUsers">Globally visible.</param>
        /// <param name="Progress">Collection of User Progress for Curriculum.</param>
        public Curriculum(string Id = default(string), string Name = default(string), string HtmlIntro = default(string), string ImgUrl = default(string), int? ItemCount = default(int?), string RenderAs = default(string), bool? VisibleToAllUsers = default(bool?), List<CurriculumUserProgress> Progress = default(List<CurriculumUserProgress>))
        {
            this.Id = Id;
            this.Name = Name;
            this.HtmlIntro = HtmlIntro;
            this.ImgUrl = ImgUrl;
            this.ItemCount = ItemCount;
            this.RenderAs = RenderAs;
            this.VisibleToAllUsers = VisibleToAllUsers;
            this.Progress = Progress;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// HTML formatted intro
        /// </summary>
        /// <value>HTML formatted intro</value>
        [DataMember(Name="htmlIntro", EmitDefaultValue=false)]
        public string HtmlIntro { get; set; }

        /// <summary>
        /// URI of header image
        /// </summary>
        /// <value>URI of header image</value>
        [DataMember(Name="imgUrl", EmitDefaultValue=false)]
        public string ImgUrl { get; set; }

        /// <summary>
        /// Number of curriculum items
        /// </summary>
        /// <value>Number of curriculum items</value>
        [DataMember(Name="itemCount", EmitDefaultValue=false)]
        public int? ItemCount { get; set; }

        /// <summary>
        /// Render method for curriculum
        /// </summary>
        /// <value>Render method for curriculum</value>
        [DataMember(Name="renderAs", EmitDefaultValue=false)]
        public string RenderAs { get; set; }

        /// <summary>
        /// Globally visible
        /// </summary>
        /// <value>Globally visible</value>
        [DataMember(Name="visibleToAllUsers", EmitDefaultValue=false)]
        public bool? VisibleToAllUsers { get; set; }

        /// <summary>
        /// Collection of User Progress for Curriculum
        /// </summary>
        /// <value>Collection of User Progress for Curriculum</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public List<CurriculumUserProgress> Progress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Curriculum {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HtmlIntro: ").Append(HtmlIntro).Append("\n");
            sb.Append("  ImgUrl: ").Append(ImgUrl).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("  RenderAs: ").Append(RenderAs).Append("\n");
            sb.Append("  VisibleToAllUsers: ").Append(VisibleToAllUsers).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Curriculum);
        }

        /// <summary>
        /// Returns true if Curriculum instances are equal
        /// </summary>
        /// <param name="input">Instance of Curriculum to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Curriculum input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HtmlIntro == input.HtmlIntro ||
                    (this.HtmlIntro != null &&
                    this.HtmlIntro.Equals(input.HtmlIntro))
                ) && 
                (
                    this.ImgUrl == input.ImgUrl ||
                    (this.ImgUrl != null &&
                    this.ImgUrl.Equals(input.ImgUrl))
                ) && 
                (
                    this.ItemCount == input.ItemCount ||
                    (this.ItemCount != null &&
                    this.ItemCount.Equals(input.ItemCount))
                ) && 
                (
                    this.RenderAs == input.RenderAs ||
                    (this.RenderAs != null &&
                    this.RenderAs.Equals(input.RenderAs))
                ) && 
                (
                    this.VisibleToAllUsers == input.VisibleToAllUsers ||
                    (this.VisibleToAllUsers != null &&
                    this.VisibleToAllUsers.Equals(input.VisibleToAllUsers))
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress != null &&
                    this.Progress.SequenceEqual(input.Progress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HtmlIntro != null)
                    hashCode = hashCode * 59 + this.HtmlIntro.GetHashCode();
                if (this.ImgUrl != null)
                    hashCode = hashCode * 59 + this.ImgUrl.GetHashCode();
                if (this.ItemCount != null)
                    hashCode = hashCode * 59 + this.ItemCount.GetHashCode();
                if (this.RenderAs != null)
                    hashCode = hashCode * 59 + this.RenderAs.GetHashCode();
                if (this.VisibleToAllUsers != null)
                    hashCode = hashCode * 59 + this.VisibleToAllUsers.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
