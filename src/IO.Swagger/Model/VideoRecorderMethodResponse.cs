/* 
 * BombBomb
 *
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The VideoRecorderMethodResponse class
    /// </summary>
    [DataContract]
    public partial class VideoRecorderMethodResponse :  IEquatable<VideoRecorderMethodResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoRecorderMethodResponse" /> class.
        /// </summary>
        /// <param name="UserId">The id of the user for whom this video will be recorded.</param>
        /// <param name="Email">The email address of the user for whom this video will be recorded.</param>
        /// <param name="ClientId">The client_id of the user for whom this video will be recorded.</param>
        /// <param name="VidId">The id of the video that will be recorded.</param>
        /// <param name="Content">An HTML blob that displays a video recorder.</param>
        /// <param name="Width">The width of the video recorder.</param>
        /// <param name="Height">the Height of the video recorder.</param>
        /// <param name="Https">Whether communication from the recorder will be handled via HTTPS (always true).</param>
        public VideoRecorderMethodResponse(string UserId = default(string), string Email = default(string), string ClientId = default(string), string VidId = default(string), string Content = default(string), int? Width = default(int?), int? Height = default(int?), bool? Https = default(bool?))
        {
            this.UserId = UserId;
            this.Email = Email;
            this.ClientId = ClientId;
            this.VidId = VidId;
            this.Content = Content;
            this.Width = Width;
            this.Height = Height;
            this.Https = Https;
        }
        
        /// <summary>
        /// The id of the user for whom this video will be recorded
        /// </summary>
        /// <value>The id of the user for whom this video will be recorded</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The email address of the user for whom this video will be recorded
        /// </summary>
        /// <value>The email address of the user for whom this video will be recorded</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The client_id of the user for whom this video will be recorded
        /// </summary>
        /// <value>The client_id of the user for whom this video will be recorded</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The id of the video that will be recorded
        /// </summary>
        /// <value>The id of the video that will be recorded</value>
        [DataMember(Name="vid_id", EmitDefaultValue=false)]
        public string VidId { get; set; }

        /// <summary>
        /// An HTML blob that displays a video recorder
        /// </summary>
        /// <value>An HTML blob that displays a video recorder</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The width of the video recorder
        /// </summary>
        /// <value>The width of the video recorder</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// the Height of the video recorder
        /// </summary>
        /// <value>the Height of the video recorder</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Whether communication from the recorder will be handled via HTTPS (always true)
        /// </summary>
        /// <value>Whether communication from the recorder will be handled via HTTPS (always true)</value>
        [DataMember(Name="https", EmitDefaultValue=false)]
        public bool? Https { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoRecorderMethodResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  VidId: ").Append(VidId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Https: ").Append(Https).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoRecorderMethodResponse);
        }

        /// <summary>
        /// Returns true if VideoRecorderMethodResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoRecorderMethodResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoRecorderMethodResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.VidId == input.VidId ||
                    (this.VidId != null &&
                    this.VidId.Equals(input.VidId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Https == input.Https ||
                    (this.Https != null &&
                    this.Https.Equals(input.Https))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.VidId != null)
                    hashCode = hashCode * 59 + this.VidId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Https != null)
                    hashCode = hashCode * 59 + this.Https.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
